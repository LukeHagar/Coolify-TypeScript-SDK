/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsCreate } from "../funcs/projectsCreate.js";
import { projectsDelete } from "../funcs/projectsDelete.js";
import { projectsGet } from "../funcs/projectsGet.js";
import { projectsGetEnvironment } from "../funcs/projectsGetEnvironment.js";
import { projectsList } from "../funcs/projectsList.js";
import { projectsUpdate } from "../funcs/projectsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Projects extends ClientSDK {
  /**
   * List
   *
   * @remarks
   * List projects.
   */
  async list(
    options?: RequestOptions,
  ): Promise<Array<components.Project>> {
    return unwrapAsync(projectsList(
      this,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Create Project.
   */
  async create(
    request: operations.CreateProjectRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreateProjectResponseBody> {
    return unwrapAsync(projectsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Get project by UUID.
   */
  async get(
    request: operations.GetProjectByUuidRequest,
    options?: RequestOptions,
  ): Promise<components.Project> {
    return unwrapAsync(projectsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Delete project by UUID.
   */
  async delete(
    request: operations.DeleteProjectByUuidRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteProjectByUuidResponseBody> {
    return unwrapAsync(projectsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Update Project.
   */
  async update(
    request: operations.UpdateProjectByUuidRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateProjectByUuidResponseBody> {
    return unwrapAsync(projectsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Environment
   *
   * @remarks
   * Get environment by name.
   */
  async getEnvironment(
    request: operations.GetEnvironmentByNameRequest,
    options?: RequestOptions,
  ): Promise<components.Environment> {
    return unwrapAsync(projectsGetEnvironment(
      this,
      request,
      options,
    ));
  }
}
