/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The one-click service type
 */
export const Type = {
  Activepieces: "activepieces",
  Appsmith: "appsmith",
  Appwrite: "appwrite",
  Authentik: "authentik",
  Babybuddy: "babybuddy",
  Budge: "budge",
  Changedetection: "changedetection",
  Chatwoot: "chatwoot",
  ClassicpressWithMariadb: "classicpress-with-mariadb",
  ClassicpressWithMysql: "classicpress-with-mysql",
  ClassicpressWithoutDatabase: "classicpress-without-database",
  Cloudflared: "cloudflared",
  CodeServer: "code-server",
  Dashboard: "dashboard",
  Directus: "directus",
  DirectusWithPostgresql: "directus-with-postgresql",
  DockerRegistry: "docker-registry",
  Docuseal: "docuseal",
  DocusealWithPostgres: "docuseal-with-postgres",
  Dokuwiki: "dokuwiki",
  Duplicati: "duplicati",
  Emby: "emby",
  Embystat: "embystat",
  Fider: "fider",
  Filebrowser: "filebrowser",
  Firefly: "firefly",
  Formbricks: "formbricks",
  Ghost: "ghost",
  Gitea: "gitea",
  GiteaWithMariadb: "gitea-with-mariadb",
  GiteaWithMysql: "gitea-with-mysql",
  GiteaWithPostgresql: "gitea-with-postgresql",
  Glance: "glance",
  Glances: "glances",
  Glitchtip: "glitchtip",
  Grafana: "grafana",
  GrafanaWithPostgresql: "grafana-with-postgresql",
  Grocy: "grocy",
  Heimdall: "heimdall",
  Homepage: "homepage",
  Jellyfin: "jellyfin",
  Jenkins: "jenkins",
  Kuzzle: "kuzzle",
  Listmonk: "listmonk",
  Logto: "logto",
  Mediawiki: "mediawiki",
  Meilisearch: "meilisearch",
  Metabase: "metabase",
  Metube: "metube",
  Minio: "minio",
  Moodle: "moodle",
  Mosquitto: "mosquitto",
  N8n: "n8n",
  N8nWithPostgresql: "n8n-with-postgresql",
  NextImageTransformation: "next-image-transformation",
  Nextcloud: "nextcloud",
  Nocodb: "nocodb",
  Odoo: "odoo",
  Openblocks: "openblocks",
  Pairdrop: "pairdrop",
  Penpot: "penpot",
  Phpmyadmin: "phpmyadmin",
  Pocketbase: "pocketbase",
  Posthog: "posthog",
  ReactiveResume: "reactive-resume",
  Rocketchat: "rocketchat",
  Shlink: "shlink",
  Slash: "slash",
  Snapdrop: "snapdrop",
  Statusnook: "statusnook",
  StirlingPdf: "stirling-pdf",
  Supabase: "supabase",
  Syncthing: "syncthing",
  Tolgee: "tolgee",
  Trigger: "trigger",
  TriggerWithExternalDatabase: "trigger-with-external-database",
  Twenty: "twenty",
  Umami: "umami",
  UnleashWithPostgresql: "unleash-with-postgresql",
  UnleashWithoutDatabase: "unleash-without-database",
  UptimeKuma: "uptime-kuma",
  Vaultwarden: "vaultwarden",
  Vikunja: "vikunja",
  Weblate: "weblate",
  Whoogle: "whoogle",
  WordpressWithMariadb: "wordpress-with-mariadb",
  WordpressWithMysql: "wordpress-with-mysql",
  WordpressWithoutDatabase: "wordpress-without-database",
} as const;
/**
 * The one-click service type
 */
export type Type = ClosedEnum<typeof Type>;

export type CreateServiceRequestBody = {
  /**
   * The one-click service type
   */
  type: Type;
  /**
   * Name of the service.
   */
  name?: string | undefined;
  /**
   * Description of the service.
   */
  description?: string | null | undefined;
  /**
   * Project UUID.
   */
  projectUuid: string;
  /**
   * Environment name.
   */
  environmentName: string;
  /**
   * Server UUID.
   */
  serverUuid: string;
  /**
   * Destination UUID. Required if server has multiple destinations.
   */
  destinationUuid?: string | undefined;
  /**
   * Start the service immediately after creation.
   */
  instantDeploy?: boolean | undefined;
};

/**
 * Create a service.
 */
export type CreateServiceResponseBody = {
  /**
   * Service UUID.
   */
  uuid?: string | undefined;
  /**
   * Service domains.
   */
  domains?: Array<string> | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const CreateServiceRequestBody$inboundSchema: z.ZodType<
  CreateServiceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type$inboundSchema,
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  project_uuid: z.string(),
  environment_name: z.string(),
  server_uuid: z.string(),
  destination_uuid: z.string().optional(),
  instant_deploy: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "project_uuid": "projectUuid",
    "environment_name": "environmentName",
    "server_uuid": "serverUuid",
    "destination_uuid": "destinationUuid",
    "instant_deploy": "instantDeploy",
  });
});

/** @internal */
export type CreateServiceRequestBody$Outbound = {
  type: string;
  name?: string | undefined;
  description?: string | null | undefined;
  project_uuid: string;
  environment_name: string;
  server_uuid: string;
  destination_uuid?: string | undefined;
  instant_deploy: boolean;
};

/** @internal */
export const CreateServiceRequestBody$outboundSchema: z.ZodType<
  CreateServiceRequestBody$Outbound,
  z.ZodTypeDef,
  CreateServiceRequestBody
> = z.object({
  type: Type$outboundSchema,
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  projectUuid: z.string(),
  environmentName: z.string(),
  serverUuid: z.string(),
  destinationUuid: z.string().optional(),
  instantDeploy: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    projectUuid: "project_uuid",
    environmentName: "environment_name",
    serverUuid: "server_uuid",
    destinationUuid: "destination_uuid",
    instantDeploy: "instant_deploy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceRequestBody$ {
  /** @deprecated use `CreateServiceRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateServiceRequestBody$inboundSchema;
  /** @deprecated use `CreateServiceRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateServiceRequestBody$outboundSchema;
  /** @deprecated use `CreateServiceRequestBody$Outbound` instead. */
  export type Outbound = CreateServiceRequestBody$Outbound;
}

export function createServiceRequestBodyToJSON(
  createServiceRequestBody: CreateServiceRequestBody,
): string {
  return JSON.stringify(
    CreateServiceRequestBody$outboundSchema.parse(createServiceRequestBody),
  );
}

export function createServiceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateServiceResponseBody$inboundSchema: z.ZodType<
  CreateServiceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  domains: z.array(z.string()).optional(),
});

/** @internal */
export type CreateServiceResponseBody$Outbound = {
  uuid?: string | undefined;
  domains?: Array<string> | undefined;
};

/** @internal */
export const CreateServiceResponseBody$outboundSchema: z.ZodType<
  CreateServiceResponseBody$Outbound,
  z.ZodTypeDef,
  CreateServiceResponseBody
> = z.object({
  uuid: z.string().optional(),
  domains: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceResponseBody$ {
  /** @deprecated use `CreateServiceResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateServiceResponseBody$inboundSchema;
  /** @deprecated use `CreateServiceResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateServiceResponseBody$outboundSchema;
  /** @deprecated use `CreateServiceResponseBody$Outbound` instead. */
  export type Outbound = CreateServiceResponseBody$Outbound;
}

export function createServiceResponseBodyToJSON(
  createServiceResponseBody: CreateServiceResponseBody,
): string {
  return JSON.stringify(
    CreateServiceResponseBody$outboundSchema.parse(createServiceResponseBody),
  );
}

export function createServiceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceResponseBody' from JSON`,
  );
}
