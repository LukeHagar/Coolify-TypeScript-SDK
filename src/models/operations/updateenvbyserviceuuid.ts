/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Env updated.
 */
export type UpdateEnvByServiceUuidRequestBody = {
  /**
   * The key of the environment variable.
   */
  key: string;
  /**
   * The value of the environment variable.
   */
  value: string;
  /**
   * The flag to indicate if the environment variable is used in preview deployments.
   */
  isPreview?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is used in build time.
   */
  isBuildTime?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is a literal, nothing espaced.
   */
  isLiteral?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is multiline.
   */
  isMultiline?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable's value is shown on the UI.
   */
  isShownOnce?: boolean | undefined;
};

export type UpdateEnvByServiceUuidRequest = {
  /**
   * UUID of the service.
   */
  uuid: string;
  /**
   * Env updated.
   */
  requestBody: UpdateEnvByServiceUuidRequestBody;
};

/**
 * Environment variable updated.
 */
export type UpdateEnvByServiceUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const UpdateEnvByServiceUuidRequestBody$inboundSchema: z.ZodType<
  UpdateEnvByServiceUuidRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
  is_preview: z.boolean().optional(),
  is_build_time: z.boolean().optional(),
  is_literal: z.boolean().optional(),
  is_multiline: z.boolean().optional(),
  is_shown_once: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_preview": "isPreview",
    "is_build_time": "isBuildTime",
    "is_literal": "isLiteral",
    "is_multiline": "isMultiline",
    "is_shown_once": "isShownOnce",
  });
});

/** @internal */
export type UpdateEnvByServiceUuidRequestBody$Outbound = {
  key: string;
  value: string;
  is_preview?: boolean | undefined;
  is_build_time?: boolean | undefined;
  is_literal?: boolean | undefined;
  is_multiline?: boolean | undefined;
  is_shown_once?: boolean | undefined;
};

/** @internal */
export const UpdateEnvByServiceUuidRequestBody$outboundSchema: z.ZodType<
  UpdateEnvByServiceUuidRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEnvByServiceUuidRequestBody
> = z.object({
  key: z.string(),
  value: z.string(),
  isPreview: z.boolean().optional(),
  isBuildTime: z.boolean().optional(),
  isLiteral: z.boolean().optional(),
  isMultiline: z.boolean().optional(),
  isShownOnce: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isPreview: "is_preview",
    isBuildTime: "is_build_time",
    isLiteral: "is_literal",
    isMultiline: "is_multiline",
    isShownOnce: "is_shown_once",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvByServiceUuidRequestBody$ {
  /** @deprecated use `UpdateEnvByServiceUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvByServiceUuidRequestBody$inboundSchema;
  /** @deprecated use `UpdateEnvByServiceUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvByServiceUuidRequestBody$outboundSchema;
  /** @deprecated use `UpdateEnvByServiceUuidRequestBody$Outbound` instead. */
  export type Outbound = UpdateEnvByServiceUuidRequestBody$Outbound;
}

export function updateEnvByServiceUuidRequestBodyToJSON(
  updateEnvByServiceUuidRequestBody: UpdateEnvByServiceUuidRequestBody,
): string {
  return JSON.stringify(
    UpdateEnvByServiceUuidRequestBody$outboundSchema.parse(
      updateEnvByServiceUuidRequestBody,
    ),
  );
}

export function updateEnvByServiceUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvByServiceUuidRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnvByServiceUuidRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvByServiceUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateEnvByServiceUuidRequest$inboundSchema: z.ZodType<
  UpdateEnvByServiceUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() => UpdateEnvByServiceUuidRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateEnvByServiceUuidRequest$Outbound = {
  uuid: string;
  RequestBody: UpdateEnvByServiceUuidRequestBody$Outbound;
};

/** @internal */
export const UpdateEnvByServiceUuidRequest$outboundSchema: z.ZodType<
  UpdateEnvByServiceUuidRequest$Outbound,
  z.ZodTypeDef,
  UpdateEnvByServiceUuidRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() => UpdateEnvByServiceUuidRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvByServiceUuidRequest$ {
  /** @deprecated use `UpdateEnvByServiceUuidRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvByServiceUuidRequest$inboundSchema;
  /** @deprecated use `UpdateEnvByServiceUuidRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateEnvByServiceUuidRequest$outboundSchema;
  /** @deprecated use `UpdateEnvByServiceUuidRequest$Outbound` instead. */
  export type Outbound = UpdateEnvByServiceUuidRequest$Outbound;
}

export function updateEnvByServiceUuidRequestToJSON(
  updateEnvByServiceUuidRequest: UpdateEnvByServiceUuidRequest,
): string {
  return JSON.stringify(
    UpdateEnvByServiceUuidRequest$outboundSchema.parse(
      updateEnvByServiceUuidRequest,
    ),
  );
}

export function updateEnvByServiceUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvByServiceUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnvByServiceUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvByServiceUuidRequest' from JSON`,
  );
}

/** @internal */
export const UpdateEnvByServiceUuidResponseBody$inboundSchema: z.ZodType<
  UpdateEnvByServiceUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type UpdateEnvByServiceUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const UpdateEnvByServiceUuidResponseBody$outboundSchema: z.ZodType<
  UpdateEnvByServiceUuidResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateEnvByServiceUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvByServiceUuidResponseBody$ {
  /** @deprecated use `UpdateEnvByServiceUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvByServiceUuidResponseBody$inboundSchema;
  /** @deprecated use `UpdateEnvByServiceUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvByServiceUuidResponseBody$outboundSchema;
  /** @deprecated use `UpdateEnvByServiceUuidResponseBody$Outbound` instead. */
  export type Outbound = UpdateEnvByServiceUuidResponseBody$Outbound;
}

export function updateEnvByServiceUuidResponseBodyToJSON(
  updateEnvByServiceUuidResponseBody: UpdateEnvByServiceUuidResponseBody,
): string {
  return JSON.stringify(
    UpdateEnvByServiceUuidResponseBody$outboundSchema.parse(
      updateEnvByServiceUuidResponseBody,
    ),
  );
}

export function updateEnvByServiceUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvByServiceUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEnvByServiceUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvByServiceUuidResponseBody' from JSON`,
  );
}
