/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Env updated.
 */
export type UpdateEnvByApplicationUuidRequestBody = {
  /**
   * The key of the environment variable.
   */
  key: string;
  /**
   * The value of the environment variable.
   */
  value: string;
  /**
   * The flag to indicate if the environment variable is used in preview deployments.
   */
  isPreview?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is used in build time.
   */
  isBuildTime?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is a literal, nothing espaced.
   */
  isLiteral?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is multiline.
   */
  isMultiline?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable's value is shown on the UI.
   */
  isShownOnce?: boolean | undefined;
};

export type UpdateEnvByApplicationUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * Env updated.
   */
  requestBody: UpdateEnvByApplicationUuidRequestBody;
};

/**
 * Environment variable updated.
 */
export type UpdateEnvByApplicationUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const UpdateEnvByApplicationUuidRequestBody$inboundSchema: z.ZodType<
  UpdateEnvByApplicationUuidRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
  is_preview: z.boolean().optional(),
  is_build_time: z.boolean().optional(),
  is_literal: z.boolean().optional(),
  is_multiline: z.boolean().optional(),
  is_shown_once: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_preview": "isPreview",
    "is_build_time": "isBuildTime",
    "is_literal": "isLiteral",
    "is_multiline": "isMultiline",
    "is_shown_once": "isShownOnce",
  });
});

/** @internal */
export type UpdateEnvByApplicationUuidRequestBody$Outbound = {
  key: string;
  value: string;
  is_preview?: boolean | undefined;
  is_build_time?: boolean | undefined;
  is_literal?: boolean | undefined;
  is_multiline?: boolean | undefined;
  is_shown_once?: boolean | undefined;
};

/** @internal */
export const UpdateEnvByApplicationUuidRequestBody$outboundSchema: z.ZodType<
  UpdateEnvByApplicationUuidRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEnvByApplicationUuidRequestBody
> = z.object({
  key: z.string(),
  value: z.string(),
  isPreview: z.boolean().optional(),
  isBuildTime: z.boolean().optional(),
  isLiteral: z.boolean().optional(),
  isMultiline: z.boolean().optional(),
  isShownOnce: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isPreview: "is_preview",
    isBuildTime: "is_build_time",
    isLiteral: "is_literal",
    isMultiline: "is_multiline",
    isShownOnce: "is_shown_once",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvByApplicationUuidRequestBody$ {
  /** @deprecated use `UpdateEnvByApplicationUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEnvByApplicationUuidRequestBody$inboundSchema;
  /** @deprecated use `UpdateEnvByApplicationUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvByApplicationUuidRequestBody$outboundSchema;
  /** @deprecated use `UpdateEnvByApplicationUuidRequestBody$Outbound` instead. */
  export type Outbound = UpdateEnvByApplicationUuidRequestBody$Outbound;
}

export function updateEnvByApplicationUuidRequestBodyToJSON(
  updateEnvByApplicationUuidRequestBody: UpdateEnvByApplicationUuidRequestBody,
): string {
  return JSON.stringify(
    UpdateEnvByApplicationUuidRequestBody$outboundSchema.parse(
      updateEnvByApplicationUuidRequestBody,
    ),
  );
}

export function updateEnvByApplicationUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvByApplicationUuidRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEnvByApplicationUuidRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvByApplicationUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateEnvByApplicationUuidRequest$inboundSchema: z.ZodType<
  UpdateEnvByApplicationUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() =>
    UpdateEnvByApplicationUuidRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateEnvByApplicationUuidRequest$Outbound = {
  uuid: string;
  RequestBody: UpdateEnvByApplicationUuidRequestBody$Outbound;
};

/** @internal */
export const UpdateEnvByApplicationUuidRequest$outboundSchema: z.ZodType<
  UpdateEnvByApplicationUuidRequest$Outbound,
  z.ZodTypeDef,
  UpdateEnvByApplicationUuidRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() =>
    UpdateEnvByApplicationUuidRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvByApplicationUuidRequest$ {
  /** @deprecated use `UpdateEnvByApplicationUuidRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvByApplicationUuidRequest$inboundSchema;
  /** @deprecated use `UpdateEnvByApplicationUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvByApplicationUuidRequest$outboundSchema;
  /** @deprecated use `UpdateEnvByApplicationUuidRequest$Outbound` instead. */
  export type Outbound = UpdateEnvByApplicationUuidRequest$Outbound;
}

export function updateEnvByApplicationUuidRequestToJSON(
  updateEnvByApplicationUuidRequest: UpdateEnvByApplicationUuidRequest,
): string {
  return JSON.stringify(
    UpdateEnvByApplicationUuidRequest$outboundSchema.parse(
      updateEnvByApplicationUuidRequest,
    ),
  );
}

export function updateEnvByApplicationUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvByApplicationUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnvByApplicationUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvByApplicationUuidRequest' from JSON`,
  );
}

/** @internal */
export const UpdateEnvByApplicationUuidResponseBody$inboundSchema: z.ZodType<
  UpdateEnvByApplicationUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type UpdateEnvByApplicationUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const UpdateEnvByApplicationUuidResponseBody$outboundSchema: z.ZodType<
  UpdateEnvByApplicationUuidResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateEnvByApplicationUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvByApplicationUuidResponseBody$ {
  /** @deprecated use `UpdateEnvByApplicationUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEnvByApplicationUuidResponseBody$inboundSchema;
  /** @deprecated use `UpdateEnvByApplicationUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvByApplicationUuidResponseBody$outboundSchema;
  /** @deprecated use `UpdateEnvByApplicationUuidResponseBody$Outbound` instead. */
  export type Outbound = UpdateEnvByApplicationUuidResponseBody$Outbound;
}

export function updateEnvByApplicationUuidResponseBodyToJSON(
  updateEnvByApplicationUuidResponseBody:
    UpdateEnvByApplicationUuidResponseBody,
): string {
  return JSON.stringify(
    UpdateEnvByApplicationUuidResponseBody$outboundSchema.parse(
      updateEnvByApplicationUuidResponseBody,
    ),
  );
}

export function updateEnvByApplicationUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvByApplicationUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEnvByApplicationUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvByApplicationUuidResponseBody' from JSON`,
  );
}
