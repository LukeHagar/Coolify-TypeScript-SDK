/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDomainsByServerUuidRequest = {
  /**
   * Server's UUID
   */
  uuid: string;
};

export type GetDomainsByServerUuidResponseBody = {
  ip?: string | undefined;
  domains?: Array<string> | undefined;
};

/** @internal */
export const GetDomainsByServerUuidRequest$inboundSchema: z.ZodType<
  GetDomainsByServerUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetDomainsByServerUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetDomainsByServerUuidRequest$outboundSchema: z.ZodType<
  GetDomainsByServerUuidRequest$Outbound,
  z.ZodTypeDef,
  GetDomainsByServerUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainsByServerUuidRequest$ {
  /** @deprecated use `GetDomainsByServerUuidRequest$inboundSchema` instead. */
  export const inboundSchema = GetDomainsByServerUuidRequest$inboundSchema;
  /** @deprecated use `GetDomainsByServerUuidRequest$outboundSchema` instead. */
  export const outboundSchema = GetDomainsByServerUuidRequest$outboundSchema;
  /** @deprecated use `GetDomainsByServerUuidRequest$Outbound` instead. */
  export type Outbound = GetDomainsByServerUuidRequest$Outbound;
}

export function getDomainsByServerUuidRequestToJSON(
  getDomainsByServerUuidRequest: GetDomainsByServerUuidRequest,
): string {
  return JSON.stringify(
    GetDomainsByServerUuidRequest$outboundSchema.parse(
      getDomainsByServerUuidRequest,
    ),
  );
}

export function getDomainsByServerUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainsByServerUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainsByServerUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainsByServerUuidRequest' from JSON`,
  );
}

/** @internal */
export const GetDomainsByServerUuidResponseBody$inboundSchema: z.ZodType<
  GetDomainsByServerUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ip: z.string().optional(),
  domains: z.array(z.string()).optional(),
});

/** @internal */
export type GetDomainsByServerUuidResponseBody$Outbound = {
  ip?: string | undefined;
  domains?: Array<string> | undefined;
};

/** @internal */
export const GetDomainsByServerUuidResponseBody$outboundSchema: z.ZodType<
  GetDomainsByServerUuidResponseBody$Outbound,
  z.ZodTypeDef,
  GetDomainsByServerUuidResponseBody
> = z.object({
  ip: z.string().optional(),
  domains: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainsByServerUuidResponseBody$ {
  /** @deprecated use `GetDomainsByServerUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDomainsByServerUuidResponseBody$inboundSchema;
  /** @deprecated use `GetDomainsByServerUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetDomainsByServerUuidResponseBody$outboundSchema;
  /** @deprecated use `GetDomainsByServerUuidResponseBody$Outbound` instead. */
  export type Outbound = GetDomainsByServerUuidResponseBody$Outbound;
}

export function getDomainsByServerUuidResponseBodyToJSON(
  getDomainsByServerUuidResponseBody: GetDomainsByServerUuidResponseBody,
): string {
  return JSON.stringify(
    GetDomainsByServerUuidResponseBody$outboundSchema.parse(
      getDomainsByServerUuidResponseBody,
    ),
  );
}

export function getDomainsByServerUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainsByServerUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDomainsByServerUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainsByServerUuidResponseBody' from JSON`,
  );
}
