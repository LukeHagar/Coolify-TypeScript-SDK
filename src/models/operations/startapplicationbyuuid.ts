/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StartApplicationByUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * Force rebuild.
   */
  force?: boolean | undefined;
  /**
   * Instant deploy (skip queuing).
   */
  instantDeploy?: boolean | undefined;
};

/**
 * Start application.
 */
export type StartApplicationByUuidResponseBody = {
  /**
   * Message.
   */
  message?: string | undefined;
  /**
   * UUID of the deployment.
   */
  deploymentUuid?: string | undefined;
};

/** @internal */
export const StartApplicationByUuidRequest$inboundSchema: z.ZodType<
  StartApplicationByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  force: z.boolean().default(false),
  instant_deploy: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "instant_deploy": "instantDeploy",
  });
});

/** @internal */
export type StartApplicationByUuidRequest$Outbound = {
  uuid: string;
  force: boolean;
  instant_deploy: boolean;
};

/** @internal */
export const StartApplicationByUuidRequest$outboundSchema: z.ZodType<
  StartApplicationByUuidRequest$Outbound,
  z.ZodTypeDef,
  StartApplicationByUuidRequest
> = z.object({
  uuid: z.string(),
  force: z.boolean().default(false),
  instantDeploy: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    instantDeploy: "instant_deploy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartApplicationByUuidRequest$ {
  /** @deprecated use `StartApplicationByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = StartApplicationByUuidRequest$inboundSchema;
  /** @deprecated use `StartApplicationByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = StartApplicationByUuidRequest$outboundSchema;
  /** @deprecated use `StartApplicationByUuidRequest$Outbound` instead. */
  export type Outbound = StartApplicationByUuidRequest$Outbound;
}

export function startApplicationByUuidRequestToJSON(
  startApplicationByUuidRequest: StartApplicationByUuidRequest,
): string {
  return JSON.stringify(
    StartApplicationByUuidRequest$outboundSchema.parse(
      startApplicationByUuidRequest,
    ),
  );
}

export function startApplicationByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartApplicationByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartApplicationByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartApplicationByUuidRequest' from JSON`,
  );
}

/** @internal */
export const StartApplicationByUuidResponseBody$inboundSchema: z.ZodType<
  StartApplicationByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  deployment_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "deployment_uuid": "deploymentUuid",
  });
});

/** @internal */
export type StartApplicationByUuidResponseBody$Outbound = {
  message?: string | undefined;
  deployment_uuid?: string | undefined;
};

/** @internal */
export const StartApplicationByUuidResponseBody$outboundSchema: z.ZodType<
  StartApplicationByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  StartApplicationByUuidResponseBody
> = z.object({
  message: z.string().optional(),
  deploymentUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    deploymentUuid: "deployment_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartApplicationByUuidResponseBody$ {
  /** @deprecated use `StartApplicationByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = StartApplicationByUuidResponseBody$inboundSchema;
  /** @deprecated use `StartApplicationByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    StartApplicationByUuidResponseBody$outboundSchema;
  /** @deprecated use `StartApplicationByUuidResponseBody$Outbound` instead. */
  export type Outbound = StartApplicationByUuidResponseBody$Outbound;
}

export function startApplicationByUuidResponseBodyToJSON(
  startApplicationByUuidResponseBody: StartApplicationByUuidResponseBody,
): string {
  return JSON.stringify(
    StartApplicationByUuidResponseBody$outboundSchema.parse(
      startApplicationByUuidResponseBody,
    ),
  );
}

export function startApplicationByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StartApplicationByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      StartApplicationByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartApplicationByUuidResponseBody' from JSON`,
  );
}
