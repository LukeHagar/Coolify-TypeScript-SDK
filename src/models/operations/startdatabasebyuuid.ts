/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StartDatabaseByUuidRequest = {
  /**
   * UUID of the database.
   */
  uuid: string;
};

/**
 * Start database.
 */
export type StartDatabaseByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const StartDatabaseByUuidRequest$inboundSchema: z.ZodType<
  StartDatabaseByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type StartDatabaseByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const StartDatabaseByUuidRequest$outboundSchema: z.ZodType<
  StartDatabaseByUuidRequest$Outbound,
  z.ZodTypeDef,
  StartDatabaseByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartDatabaseByUuidRequest$ {
  /** @deprecated use `StartDatabaseByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = StartDatabaseByUuidRequest$inboundSchema;
  /** @deprecated use `StartDatabaseByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = StartDatabaseByUuidRequest$outboundSchema;
  /** @deprecated use `StartDatabaseByUuidRequest$Outbound` instead. */
  export type Outbound = StartDatabaseByUuidRequest$Outbound;
}

export function startDatabaseByUuidRequestToJSON(
  startDatabaseByUuidRequest: StartDatabaseByUuidRequest,
): string {
  return JSON.stringify(
    StartDatabaseByUuidRequest$outboundSchema.parse(startDatabaseByUuidRequest),
  );
}

export function startDatabaseByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartDatabaseByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartDatabaseByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartDatabaseByUuidRequest' from JSON`,
  );
}

/** @internal */
export const StartDatabaseByUuidResponseBody$inboundSchema: z.ZodType<
  StartDatabaseByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type StartDatabaseByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const StartDatabaseByUuidResponseBody$outboundSchema: z.ZodType<
  StartDatabaseByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  StartDatabaseByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartDatabaseByUuidResponseBody$ {
  /** @deprecated use `StartDatabaseByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = StartDatabaseByUuidResponseBody$inboundSchema;
  /** @deprecated use `StartDatabaseByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = StartDatabaseByUuidResponseBody$outboundSchema;
  /** @deprecated use `StartDatabaseByUuidResponseBody$Outbound` instead. */
  export type Outbound = StartDatabaseByUuidResponseBody$Outbound;
}

export function startDatabaseByUuidResponseBodyToJSON(
  startDatabaseByUuidResponseBody: StartDatabaseByUuidResponseBody,
): string {
  return JSON.stringify(
    StartDatabaseByUuidResponseBody$outboundSchema.parse(
      startDatabaseByUuidResponseBody,
    ),
  );
}

export function startDatabaseByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StartDatabaseByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartDatabaseByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartDatabaseByUuidResponseBody' from JSON`,
  );
}
