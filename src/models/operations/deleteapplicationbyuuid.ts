/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApplicationByUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * Delete configurations.
   */
  deleteConfigurations?: boolean | undefined;
  /**
   * Delete volumes.
   */
  deleteVolumes?: boolean | undefined;
  /**
   * Run docker cleanup.
   */
  dockerCleanup?: boolean | undefined;
  /**
   * Delete connected networks.
   */
  deleteConnectedNetworks?: boolean | undefined;
};

/**
 * Application deleted.
 */
export type DeleteApplicationByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApplicationByUuidRequest$inboundSchema: z.ZodType<
  DeleteApplicationByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  delete_configurations: z.boolean().default(true),
  delete_volumes: z.boolean().default(true),
  docker_cleanup: z.boolean().default(true),
  delete_connected_networks: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "delete_configurations": "deleteConfigurations",
    "delete_volumes": "deleteVolumes",
    "docker_cleanup": "dockerCleanup",
    "delete_connected_networks": "deleteConnectedNetworks",
  });
});

/** @internal */
export type DeleteApplicationByUuidRequest$Outbound = {
  uuid: string;
  delete_configurations: boolean;
  delete_volumes: boolean;
  docker_cleanup: boolean;
  delete_connected_networks: boolean;
};

/** @internal */
export const DeleteApplicationByUuidRequest$outboundSchema: z.ZodType<
  DeleteApplicationByUuidRequest$Outbound,
  z.ZodTypeDef,
  DeleteApplicationByUuidRequest
> = z.object({
  uuid: z.string(),
  deleteConfigurations: z.boolean().default(true),
  deleteVolumes: z.boolean().default(true),
  dockerCleanup: z.boolean().default(true),
  deleteConnectedNetworks: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    deleteConfigurations: "delete_configurations",
    deleteVolumes: "delete_volumes",
    dockerCleanup: "docker_cleanup",
    deleteConnectedNetworks: "delete_connected_networks",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApplicationByUuidRequest$ {
  /** @deprecated use `DeleteApplicationByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApplicationByUuidRequest$inboundSchema;
  /** @deprecated use `DeleteApplicationByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApplicationByUuidRequest$outboundSchema;
  /** @deprecated use `DeleteApplicationByUuidRequest$Outbound` instead. */
  export type Outbound = DeleteApplicationByUuidRequest$Outbound;
}

export function deleteApplicationByUuidRequestToJSON(
  deleteApplicationByUuidRequest: DeleteApplicationByUuidRequest,
): string {
  return JSON.stringify(
    DeleteApplicationByUuidRequest$outboundSchema.parse(
      deleteApplicationByUuidRequest,
    ),
  );
}

export function deleteApplicationByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApplicationByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApplicationByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApplicationByUuidRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApplicationByUuidResponseBody$inboundSchema: z.ZodType<
  DeleteApplicationByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApplicationByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApplicationByUuidResponseBody$outboundSchema: z.ZodType<
  DeleteApplicationByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApplicationByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApplicationByUuidResponseBody$ {
  /** @deprecated use `DeleteApplicationByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteApplicationByUuidResponseBody$inboundSchema;
  /** @deprecated use `DeleteApplicationByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteApplicationByUuidResponseBody$outboundSchema;
  /** @deprecated use `DeleteApplicationByUuidResponseBody$Outbound` instead. */
  export type Outbound = DeleteApplicationByUuidResponseBody$Outbound;
}

export function deleteApplicationByUuidResponseBodyToJSON(
  deleteApplicationByUuidResponseBody: DeleteApplicationByUuidResponseBody,
): string {
  return JSON.stringify(
    DeleteApplicationByUuidResponseBody$outboundSchema.parse(
      deleteApplicationByUuidResponseBody,
    ),
  );
}

export function deleteApplicationByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApplicationByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteApplicationByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApplicationByUuidResponseBody' from JSON`,
  );
}
