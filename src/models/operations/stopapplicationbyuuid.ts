/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StopApplicationByUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
};

/**
 * Stop application.
 */
export type StopApplicationByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const StopApplicationByUuidRequest$inboundSchema: z.ZodType<
  StopApplicationByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type StopApplicationByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const StopApplicationByUuidRequest$outboundSchema: z.ZodType<
  StopApplicationByUuidRequest$Outbound,
  z.ZodTypeDef,
  StopApplicationByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopApplicationByUuidRequest$ {
  /** @deprecated use `StopApplicationByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = StopApplicationByUuidRequest$inboundSchema;
  /** @deprecated use `StopApplicationByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = StopApplicationByUuidRequest$outboundSchema;
  /** @deprecated use `StopApplicationByUuidRequest$Outbound` instead. */
  export type Outbound = StopApplicationByUuidRequest$Outbound;
}

export function stopApplicationByUuidRequestToJSON(
  stopApplicationByUuidRequest: StopApplicationByUuidRequest,
): string {
  return JSON.stringify(
    StopApplicationByUuidRequest$outboundSchema.parse(
      stopApplicationByUuidRequest,
    ),
  );
}

export function stopApplicationByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<StopApplicationByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopApplicationByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopApplicationByUuidRequest' from JSON`,
  );
}

/** @internal */
export const StopApplicationByUuidResponseBody$inboundSchema: z.ZodType<
  StopApplicationByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type StopApplicationByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const StopApplicationByUuidResponseBody$outboundSchema: z.ZodType<
  StopApplicationByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  StopApplicationByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopApplicationByUuidResponseBody$ {
  /** @deprecated use `StopApplicationByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = StopApplicationByUuidResponseBody$inboundSchema;
  /** @deprecated use `StopApplicationByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    StopApplicationByUuidResponseBody$outboundSchema;
  /** @deprecated use `StopApplicationByUuidResponseBody$Outbound` instead. */
  export type Outbound = StopApplicationByUuidResponseBody$Outbound;
}

export function stopApplicationByUuidResponseBodyToJSON(
  stopApplicationByUuidResponseBody: StopApplicationByUuidResponseBody,
): string {
  return JSON.stringify(
    StopApplicationByUuidResponseBody$outboundSchema.parse(
      stopApplicationByUuidResponseBody,
    ),
  );
}

export function stopApplicationByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StopApplicationByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopApplicationByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopApplicationByUuidResponseBody' from JSON`,
  );
}
