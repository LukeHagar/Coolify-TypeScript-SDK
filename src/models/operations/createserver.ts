/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The proxy type.
 */
export const ProxyType = {
  Traefik: "traefik",
  Caddy: "caddy",
  None: "none",
} as const;
/**
 * The proxy type.
 */
export type ProxyType = ClosedEnum<typeof ProxyType>;

/**
 * Server created.
 */
export type CreateServerRequestBody = {
  /**
   * The name of the server.
   */
  name?: string | undefined;
  /**
   * The description of the server.
   */
  description?: string | undefined;
  /**
   * The IP of the server.
   */
  ip?: string | undefined;
  /**
   * The port of the server.
   */
  port?: number | undefined;
  /**
   * The user of the server.
   */
  user?: string | undefined;
  /**
   * The UUID of the private key.
   */
  privateKeyUuid?: string | undefined;
  /**
   * Is build server.
   */
  isBuildServer?: boolean | undefined;
  /**
   * Instant validate.
   */
  instantValidate?: boolean | undefined;
  /**
   * The proxy type.
   */
  proxyType?: ProxyType | undefined;
};

/**
 * Server created.
 */
export type CreateServerResponseBody = {
  /**
   * The UUID of the server.
   */
  uuid?: string | undefined;
};

/** @internal */
export const ProxyType$inboundSchema: z.ZodNativeEnum<typeof ProxyType> = z
  .nativeEnum(ProxyType);

/** @internal */
export const ProxyType$outboundSchema: z.ZodNativeEnum<typeof ProxyType> =
  ProxyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProxyType$ {
  /** @deprecated use `ProxyType$inboundSchema` instead. */
  export const inboundSchema = ProxyType$inboundSchema;
  /** @deprecated use `ProxyType$outboundSchema` instead. */
  export const outboundSchema = ProxyType$outboundSchema;
}

/** @internal */
export const CreateServerRequestBody$inboundSchema: z.ZodType<
  CreateServerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  ip: z.string().optional(),
  port: z.number().int().optional(),
  user: z.string().optional(),
  private_key_uuid: z.string().optional(),
  is_build_server: z.boolean().optional(),
  instant_validate: z.boolean().optional(),
  proxy_type: ProxyType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "private_key_uuid": "privateKeyUuid",
    "is_build_server": "isBuildServer",
    "instant_validate": "instantValidate",
    "proxy_type": "proxyType",
  });
});

/** @internal */
export type CreateServerRequestBody$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  ip?: string | undefined;
  port?: number | undefined;
  user?: string | undefined;
  private_key_uuid?: string | undefined;
  is_build_server?: boolean | undefined;
  instant_validate?: boolean | undefined;
  proxy_type?: string | undefined;
};

/** @internal */
export const CreateServerRequestBody$outboundSchema: z.ZodType<
  CreateServerRequestBody$Outbound,
  z.ZodTypeDef,
  CreateServerRequestBody
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  ip: z.string().optional(),
  port: z.number().int().optional(),
  user: z.string().optional(),
  privateKeyUuid: z.string().optional(),
  isBuildServer: z.boolean().optional(),
  instantValidate: z.boolean().optional(),
  proxyType: ProxyType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    privateKeyUuid: "private_key_uuid",
    isBuildServer: "is_build_server",
    instantValidate: "instant_validate",
    proxyType: "proxy_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServerRequestBody$ {
  /** @deprecated use `CreateServerRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateServerRequestBody$inboundSchema;
  /** @deprecated use `CreateServerRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateServerRequestBody$outboundSchema;
  /** @deprecated use `CreateServerRequestBody$Outbound` instead. */
  export type Outbound = CreateServerRequestBody$Outbound;
}

export function createServerRequestBodyToJSON(
  createServerRequestBody: CreateServerRequestBody,
): string {
  return JSON.stringify(
    CreateServerRequestBody$outboundSchema.parse(createServerRequestBody),
  );
}

export function createServerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateServerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServerRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateServerResponseBody$inboundSchema: z.ZodType<
  CreateServerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type CreateServerResponseBody$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const CreateServerResponseBody$outboundSchema: z.ZodType<
  CreateServerResponseBody$Outbound,
  z.ZodTypeDef,
  CreateServerResponseBody
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServerResponseBody$ {
  /** @deprecated use `CreateServerResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateServerResponseBody$inboundSchema;
  /** @deprecated use `CreateServerResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateServerResponseBody$outboundSchema;
  /** @deprecated use `CreateServerResponseBody$Outbound` instead. */
  export type Outbound = CreateServerResponseBody$Outbound;
}

export function createServerResponseBodyToJSON(
  createServerResponseBody: CreateServerResponseBody,
): string {
  return JSON.stringify(
    CreateServerResponseBody$outboundSchema.parse(createServerResponseBody),
  );
}

export function createServerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateServerResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServerResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServerResponseBody' from JSON`,
  );
}
