/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RestartApplicationByUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
};

/**
 * Restart application.
 */
export type RestartApplicationByUuidResponseBody = {
  message?: string | undefined;
  /**
   * UUID of the deployment.
   */
  deploymentUuid?: string | undefined;
};

/** @internal */
export const RestartApplicationByUuidRequest$inboundSchema: z.ZodType<
  RestartApplicationByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type RestartApplicationByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const RestartApplicationByUuidRequest$outboundSchema: z.ZodType<
  RestartApplicationByUuidRequest$Outbound,
  z.ZodTypeDef,
  RestartApplicationByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestartApplicationByUuidRequest$ {
  /** @deprecated use `RestartApplicationByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = RestartApplicationByUuidRequest$inboundSchema;
  /** @deprecated use `RestartApplicationByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = RestartApplicationByUuidRequest$outboundSchema;
  /** @deprecated use `RestartApplicationByUuidRequest$Outbound` instead. */
  export type Outbound = RestartApplicationByUuidRequest$Outbound;
}

export function restartApplicationByUuidRequestToJSON(
  restartApplicationByUuidRequest: RestartApplicationByUuidRequest,
): string {
  return JSON.stringify(
    RestartApplicationByUuidRequest$outboundSchema.parse(
      restartApplicationByUuidRequest,
    ),
  );
}

export function restartApplicationByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<RestartApplicationByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestartApplicationByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestartApplicationByUuidRequest' from JSON`,
  );
}

/** @internal */
export const RestartApplicationByUuidResponseBody$inboundSchema: z.ZodType<
  RestartApplicationByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  deployment_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "deployment_uuid": "deploymentUuid",
  });
});

/** @internal */
export type RestartApplicationByUuidResponseBody$Outbound = {
  message?: string | undefined;
  deployment_uuid?: string | undefined;
};

/** @internal */
export const RestartApplicationByUuidResponseBody$outboundSchema: z.ZodType<
  RestartApplicationByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  RestartApplicationByUuidResponseBody
> = z.object({
  message: z.string().optional(),
  deploymentUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    deploymentUuid: "deployment_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestartApplicationByUuidResponseBody$ {
  /** @deprecated use `RestartApplicationByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RestartApplicationByUuidResponseBody$inboundSchema;
  /** @deprecated use `RestartApplicationByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RestartApplicationByUuidResponseBody$outboundSchema;
  /** @deprecated use `RestartApplicationByUuidResponseBody$Outbound` instead. */
  export type Outbound = RestartApplicationByUuidResponseBody$Outbound;
}

export function restartApplicationByUuidResponseBodyToJSON(
  restartApplicationByUuidResponseBody: RestartApplicationByUuidResponseBody,
): string {
  return JSON.stringify(
    RestartApplicationByUuidResponseBody$outboundSchema.parse(
      restartApplicationByUuidResponseBody,
    ),
  );
}

export function restartApplicationByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RestartApplicationByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RestartApplicationByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestartApplicationByUuidResponseBody' from JSON`,
  );
}
