/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Command to execute.
 */
export type ExecuteCommandApplicationRequestBody = {
  /**
   * Command to execute.
   */
  command?: string | undefined;
};

export type ExecuteCommandApplicationRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * Command to execute.
   */
  requestBody: ExecuteCommandApplicationRequestBody;
};

/**
 * Execute a command on the application's current container.
 */
export type ExecuteCommandApplicationResponseBody = {
  message?: string | undefined;
  response?: string | undefined;
};

/** @internal */
export const ExecuteCommandApplicationRequestBody$inboundSchema: z.ZodType<
  ExecuteCommandApplicationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  command: z.string().optional(),
});

/** @internal */
export type ExecuteCommandApplicationRequestBody$Outbound = {
  command?: string | undefined;
};

/** @internal */
export const ExecuteCommandApplicationRequestBody$outboundSchema: z.ZodType<
  ExecuteCommandApplicationRequestBody$Outbound,
  z.ZodTypeDef,
  ExecuteCommandApplicationRequestBody
> = z.object({
  command: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteCommandApplicationRequestBody$ {
  /** @deprecated use `ExecuteCommandApplicationRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ExecuteCommandApplicationRequestBody$inboundSchema;
  /** @deprecated use `ExecuteCommandApplicationRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ExecuteCommandApplicationRequestBody$outboundSchema;
  /** @deprecated use `ExecuteCommandApplicationRequestBody$Outbound` instead. */
  export type Outbound = ExecuteCommandApplicationRequestBody$Outbound;
}

export function executeCommandApplicationRequestBodyToJSON(
  executeCommandApplicationRequestBody: ExecuteCommandApplicationRequestBody,
): string {
  return JSON.stringify(
    ExecuteCommandApplicationRequestBody$outboundSchema.parse(
      executeCommandApplicationRequestBody,
    ),
  );
}

export function executeCommandApplicationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ExecuteCommandApplicationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExecuteCommandApplicationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecuteCommandApplicationRequestBody' from JSON`,
  );
}

/** @internal */
export const ExecuteCommandApplicationRequest$inboundSchema: z.ZodType<
  ExecuteCommandApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() => ExecuteCommandApplicationRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ExecuteCommandApplicationRequest$Outbound = {
  uuid: string;
  RequestBody: ExecuteCommandApplicationRequestBody$Outbound;
};

/** @internal */
export const ExecuteCommandApplicationRequest$outboundSchema: z.ZodType<
  ExecuteCommandApplicationRequest$Outbound,
  z.ZodTypeDef,
  ExecuteCommandApplicationRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() =>
    ExecuteCommandApplicationRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteCommandApplicationRequest$ {
  /** @deprecated use `ExecuteCommandApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = ExecuteCommandApplicationRequest$inboundSchema;
  /** @deprecated use `ExecuteCommandApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = ExecuteCommandApplicationRequest$outboundSchema;
  /** @deprecated use `ExecuteCommandApplicationRequest$Outbound` instead. */
  export type Outbound = ExecuteCommandApplicationRequest$Outbound;
}

export function executeCommandApplicationRequestToJSON(
  executeCommandApplicationRequest: ExecuteCommandApplicationRequest,
): string {
  return JSON.stringify(
    ExecuteCommandApplicationRequest$outboundSchema.parse(
      executeCommandApplicationRequest,
    ),
  );
}

export function executeCommandApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExecuteCommandApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExecuteCommandApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecuteCommandApplicationRequest' from JSON`,
  );
}

/** @internal */
export const ExecuteCommandApplicationResponseBody$inboundSchema: z.ZodType<
  ExecuteCommandApplicationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  response: z.string().optional(),
});

/** @internal */
export type ExecuteCommandApplicationResponseBody$Outbound = {
  message?: string | undefined;
  response?: string | undefined;
};

/** @internal */
export const ExecuteCommandApplicationResponseBody$outboundSchema: z.ZodType<
  ExecuteCommandApplicationResponseBody$Outbound,
  z.ZodTypeDef,
  ExecuteCommandApplicationResponseBody
> = z.object({
  message: z.string().optional(),
  response: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteCommandApplicationResponseBody$ {
  /** @deprecated use `ExecuteCommandApplicationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ExecuteCommandApplicationResponseBody$inboundSchema;
  /** @deprecated use `ExecuteCommandApplicationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ExecuteCommandApplicationResponseBody$outboundSchema;
  /** @deprecated use `ExecuteCommandApplicationResponseBody$Outbound` instead. */
  export type Outbound = ExecuteCommandApplicationResponseBody$Outbound;
}

export function executeCommandApplicationResponseBodyToJSON(
  executeCommandApplicationResponseBody: ExecuteCommandApplicationResponseBody,
): string {
  return JSON.stringify(
    ExecuteCommandApplicationResponseBody$outboundSchema.parse(
      executeCommandApplicationResponseBody,
    ),
  );
}

export function executeCommandApplicationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ExecuteCommandApplicationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExecuteCommandApplicationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecuteCommandApplicationResponseBody' from JSON`,
  );
}
