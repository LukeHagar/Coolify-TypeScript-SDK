/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Env created.
 */
export type CreateEnvByApplicationUuidRequestBody = {
  /**
   * The key of the environment variable.
   */
  key?: string | undefined;
  /**
   * The value of the environment variable.
   */
  value?: string | undefined;
  /**
   * The flag to indicate if the environment variable is used in preview deployments.
   */
  isPreview?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is used in build time.
   */
  isBuildTime?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is a literal, nothing espaced.
   */
  isLiteral?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is multiline.
   */
  isMultiline?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable's value is shown on the UI.
   */
  isShownOnce?: boolean | undefined;
};

export type CreateEnvByApplicationUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * Env created.
   */
  requestBody: CreateEnvByApplicationUuidRequestBody;
};

/**
 * Environment variable created.
 */
export type CreateEnvByApplicationUuidResponseBody = {
  uuid?: string | undefined;
};

/** @internal */
export const CreateEnvByApplicationUuidRequestBody$inboundSchema: z.ZodType<
  CreateEnvByApplicationUuidRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  is_preview: z.boolean().optional(),
  is_build_time: z.boolean().optional(),
  is_literal: z.boolean().optional(),
  is_multiline: z.boolean().optional(),
  is_shown_once: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_preview": "isPreview",
    "is_build_time": "isBuildTime",
    "is_literal": "isLiteral",
    "is_multiline": "isMultiline",
    "is_shown_once": "isShownOnce",
  });
});

/** @internal */
export type CreateEnvByApplicationUuidRequestBody$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  is_preview?: boolean | undefined;
  is_build_time?: boolean | undefined;
  is_literal?: boolean | undefined;
  is_multiline?: boolean | undefined;
  is_shown_once?: boolean | undefined;
};

/** @internal */
export const CreateEnvByApplicationUuidRequestBody$outboundSchema: z.ZodType<
  CreateEnvByApplicationUuidRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEnvByApplicationUuidRequestBody
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  isPreview: z.boolean().optional(),
  isBuildTime: z.boolean().optional(),
  isLiteral: z.boolean().optional(),
  isMultiline: z.boolean().optional(),
  isShownOnce: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isPreview: "is_preview",
    isBuildTime: "is_build_time",
    isLiteral: "is_literal",
    isMultiline: "is_multiline",
    isShownOnce: "is_shown_once",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvByApplicationUuidRequestBody$ {
  /** @deprecated use `CreateEnvByApplicationUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateEnvByApplicationUuidRequestBody$inboundSchema;
  /** @deprecated use `CreateEnvByApplicationUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateEnvByApplicationUuidRequestBody$outboundSchema;
  /** @deprecated use `CreateEnvByApplicationUuidRequestBody$Outbound` instead. */
  export type Outbound = CreateEnvByApplicationUuidRequestBody$Outbound;
}

export function createEnvByApplicationUuidRequestBodyToJSON(
  createEnvByApplicationUuidRequestBody: CreateEnvByApplicationUuidRequestBody,
): string {
  return JSON.stringify(
    CreateEnvByApplicationUuidRequestBody$outboundSchema.parse(
      createEnvByApplicationUuidRequestBody,
    ),
  );
}

export function createEnvByApplicationUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvByApplicationUuidRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateEnvByApplicationUuidRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvByApplicationUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateEnvByApplicationUuidRequest$inboundSchema: z.ZodType<
  CreateEnvByApplicationUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() =>
    CreateEnvByApplicationUuidRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateEnvByApplicationUuidRequest$Outbound = {
  uuid: string;
  RequestBody: CreateEnvByApplicationUuidRequestBody$Outbound;
};

/** @internal */
export const CreateEnvByApplicationUuidRequest$outboundSchema: z.ZodType<
  CreateEnvByApplicationUuidRequest$Outbound,
  z.ZodTypeDef,
  CreateEnvByApplicationUuidRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() =>
    CreateEnvByApplicationUuidRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvByApplicationUuidRequest$ {
  /** @deprecated use `CreateEnvByApplicationUuidRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEnvByApplicationUuidRequest$inboundSchema;
  /** @deprecated use `CreateEnvByApplicationUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateEnvByApplicationUuidRequest$outboundSchema;
  /** @deprecated use `CreateEnvByApplicationUuidRequest$Outbound` instead. */
  export type Outbound = CreateEnvByApplicationUuidRequest$Outbound;
}

export function createEnvByApplicationUuidRequestToJSON(
  createEnvByApplicationUuidRequest: CreateEnvByApplicationUuidRequest,
): string {
  return JSON.stringify(
    CreateEnvByApplicationUuidRequest$outboundSchema.parse(
      createEnvByApplicationUuidRequest,
    ),
  );
}

export function createEnvByApplicationUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvByApplicationUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnvByApplicationUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvByApplicationUuidRequest' from JSON`,
  );
}

/** @internal */
export const CreateEnvByApplicationUuidResponseBody$inboundSchema: z.ZodType<
  CreateEnvByApplicationUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type CreateEnvByApplicationUuidResponseBody$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const CreateEnvByApplicationUuidResponseBody$outboundSchema: z.ZodType<
  CreateEnvByApplicationUuidResponseBody$Outbound,
  z.ZodTypeDef,
  CreateEnvByApplicationUuidResponseBody
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvByApplicationUuidResponseBody$ {
  /** @deprecated use `CreateEnvByApplicationUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateEnvByApplicationUuidResponseBody$inboundSchema;
  /** @deprecated use `CreateEnvByApplicationUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateEnvByApplicationUuidResponseBody$outboundSchema;
  /** @deprecated use `CreateEnvByApplicationUuidResponseBody$Outbound` instead. */
  export type Outbound = CreateEnvByApplicationUuidResponseBody$Outbound;
}

export function createEnvByApplicationUuidResponseBodyToJSON(
  createEnvByApplicationUuidResponseBody:
    CreateEnvByApplicationUuidResponseBody,
): string {
  return JSON.stringify(
    CreateEnvByApplicationUuidResponseBody$outboundSchema.parse(
      createEnvByApplicationUuidResponseBody,
    ),
  );
}

export function createEnvByApplicationUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvByApplicationUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateEnvByApplicationUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvByApplicationUuidResponseBody' from JSON`,
  );
}
