/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Data = {
  /**
   * The key of the environment variable.
   */
  key?: string | undefined;
  /**
   * The value of the environment variable.
   */
  value?: string | undefined;
  /**
   * The flag to indicate if the environment variable is used in preview deployments.
   */
  isPreview?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is used in build time.
   */
  isBuildTime?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is a literal, nothing espaced.
   */
  isLiteral?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is multiline.
   */
  isMultiline?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable's value is shown on the UI.
   */
  isShownOnce?: boolean | undefined;
};

/**
 * Bulk envs updated.
 */
export type UpdateEnvsByApplicationUuidRequestBody = {
  data: Array<Data>;
};

export type UpdateEnvsByApplicationUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * Bulk envs updated.
   */
  requestBody: UpdateEnvsByApplicationUuidRequestBody;
};

/**
 * Environment variables updated.
 */
export type UpdateEnvsByApplicationUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    key: z.string().optional(),
    value: z.string().optional(),
    is_preview: z.boolean().optional(),
    is_build_time: z.boolean().optional(),
    is_literal: z.boolean().optional(),
    is_multiline: z.boolean().optional(),
    is_shown_once: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "is_preview": "isPreview",
      "is_build_time": "isBuildTime",
      "is_literal": "isLiteral",
      "is_multiline": "isMultiline",
      "is_shown_once": "isShownOnce",
    });
  });

/** @internal */
export type Data$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  is_preview?: boolean | undefined;
  is_build_time?: boolean | undefined;
  is_literal?: boolean | undefined;
  is_multiline?: boolean | undefined;
  is_shown_once?: boolean | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    key: z.string().optional(),
    value: z.string().optional(),
    isPreview: z.boolean().optional(),
    isBuildTime: z.boolean().optional(),
    isLiteral: z.boolean().optional(),
    isMultiline: z.boolean().optional(),
    isShownOnce: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      isPreview: "is_preview",
      isBuildTime: "is_build_time",
      isLiteral: "is_literal",
      isMultiline: "is_multiline",
      isShownOnce: "is_shown_once",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const UpdateEnvsByApplicationUuidRequestBody$inboundSchema: z.ZodType<
  UpdateEnvsByApplicationUuidRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => Data$inboundSchema)),
});

/** @internal */
export type UpdateEnvsByApplicationUuidRequestBody$Outbound = {
  data: Array<Data$Outbound>;
};

/** @internal */
export const UpdateEnvsByApplicationUuidRequestBody$outboundSchema: z.ZodType<
  UpdateEnvsByApplicationUuidRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEnvsByApplicationUuidRequestBody
> = z.object({
  data: z.array(z.lazy(() => Data$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvsByApplicationUuidRequestBody$ {
  /** @deprecated use `UpdateEnvsByApplicationUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEnvsByApplicationUuidRequestBody$inboundSchema;
  /** @deprecated use `UpdateEnvsByApplicationUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvsByApplicationUuidRequestBody$outboundSchema;
  /** @deprecated use `UpdateEnvsByApplicationUuidRequestBody$Outbound` instead. */
  export type Outbound = UpdateEnvsByApplicationUuidRequestBody$Outbound;
}

export function updateEnvsByApplicationUuidRequestBodyToJSON(
  updateEnvsByApplicationUuidRequestBody:
    UpdateEnvsByApplicationUuidRequestBody,
): string {
  return JSON.stringify(
    UpdateEnvsByApplicationUuidRequestBody$outboundSchema.parse(
      updateEnvsByApplicationUuidRequestBody,
    ),
  );
}

export function updateEnvsByApplicationUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvsByApplicationUuidRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEnvsByApplicationUuidRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvsByApplicationUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateEnvsByApplicationUuidRequest$inboundSchema: z.ZodType<
  UpdateEnvsByApplicationUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() =>
    UpdateEnvsByApplicationUuidRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateEnvsByApplicationUuidRequest$Outbound = {
  uuid: string;
  RequestBody: UpdateEnvsByApplicationUuidRequestBody$Outbound;
};

/** @internal */
export const UpdateEnvsByApplicationUuidRequest$outboundSchema: z.ZodType<
  UpdateEnvsByApplicationUuidRequest$Outbound,
  z.ZodTypeDef,
  UpdateEnvsByApplicationUuidRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() =>
    UpdateEnvsByApplicationUuidRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvsByApplicationUuidRequest$ {
  /** @deprecated use `UpdateEnvsByApplicationUuidRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvsByApplicationUuidRequest$inboundSchema;
  /** @deprecated use `UpdateEnvsByApplicationUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvsByApplicationUuidRequest$outboundSchema;
  /** @deprecated use `UpdateEnvsByApplicationUuidRequest$Outbound` instead. */
  export type Outbound = UpdateEnvsByApplicationUuidRequest$Outbound;
}

export function updateEnvsByApplicationUuidRequestToJSON(
  updateEnvsByApplicationUuidRequest: UpdateEnvsByApplicationUuidRequest,
): string {
  return JSON.stringify(
    UpdateEnvsByApplicationUuidRequest$outboundSchema.parse(
      updateEnvsByApplicationUuidRequest,
    ),
  );
}

export function updateEnvsByApplicationUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvsByApplicationUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEnvsByApplicationUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvsByApplicationUuidRequest' from JSON`,
  );
}

/** @internal */
export const UpdateEnvsByApplicationUuidResponseBody$inboundSchema: z.ZodType<
  UpdateEnvsByApplicationUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type UpdateEnvsByApplicationUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const UpdateEnvsByApplicationUuidResponseBody$outboundSchema: z.ZodType<
  UpdateEnvsByApplicationUuidResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateEnvsByApplicationUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvsByApplicationUuidResponseBody$ {
  /** @deprecated use `UpdateEnvsByApplicationUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEnvsByApplicationUuidResponseBody$inboundSchema;
  /** @deprecated use `UpdateEnvsByApplicationUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEnvsByApplicationUuidResponseBody$outboundSchema;
  /** @deprecated use `UpdateEnvsByApplicationUuidResponseBody$Outbound` instead. */
  export type Outbound = UpdateEnvsByApplicationUuidResponseBody$Outbound;
}

export function updateEnvsByApplicationUuidResponseBodyToJSON(
  updateEnvsByApplicationUuidResponseBody:
    UpdateEnvsByApplicationUuidResponseBody,
): string {
  return JSON.stringify(
    UpdateEnvsByApplicationUuidResponseBody$outboundSchema.parse(
      updateEnvsByApplicationUuidResponseBody,
    ),
  );
}

export function updateEnvsByApplicationUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEnvsByApplicationUuidResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEnvsByApplicationUuidResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEnvsByApplicationUuidResponseBody' from JSON`,
  );
}
