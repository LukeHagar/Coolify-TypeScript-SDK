/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeployByTagOrUuidRequest = {
  /**
   * Tag name(s). Comma separated list is also accepted.
   */
  tag?: string | undefined;
  /**
   * Resource UUID(s). Comma separated list is also accepted.
   */
  uuid?: string | undefined;
  /**
   * Force rebuild (without cache)
   */
  force?: boolean | undefined;
};

export type Deployments = {
  message?: string | undefined;
  resourceUuid?: string | undefined;
  deploymentUuid?: string | undefined;
};

/**
 * Get deployment(s) UUID's
 */
export type DeployByTagOrUuidResponseBody = {
  deployments?: Array<Deployments> | undefined;
};

/** @internal */
export const DeployByTagOrUuidRequest$inboundSchema: z.ZodType<
  DeployByTagOrUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  uuid: z.string().optional(),
  force: z.boolean().optional(),
});

/** @internal */
export type DeployByTagOrUuidRequest$Outbound = {
  tag?: string | undefined;
  uuid?: string | undefined;
  force?: boolean | undefined;
};

/** @internal */
export const DeployByTagOrUuidRequest$outboundSchema: z.ZodType<
  DeployByTagOrUuidRequest$Outbound,
  z.ZodTypeDef,
  DeployByTagOrUuidRequest
> = z.object({
  tag: z.string().optional(),
  uuid: z.string().optional(),
  force: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployByTagOrUuidRequest$ {
  /** @deprecated use `DeployByTagOrUuidRequest$inboundSchema` instead. */
  export const inboundSchema = DeployByTagOrUuidRequest$inboundSchema;
  /** @deprecated use `DeployByTagOrUuidRequest$outboundSchema` instead. */
  export const outboundSchema = DeployByTagOrUuidRequest$outboundSchema;
  /** @deprecated use `DeployByTagOrUuidRequest$Outbound` instead. */
  export type Outbound = DeployByTagOrUuidRequest$Outbound;
}

export function deployByTagOrUuidRequestToJSON(
  deployByTagOrUuidRequest: DeployByTagOrUuidRequest,
): string {
  return JSON.stringify(
    DeployByTagOrUuidRequest$outboundSchema.parse(deployByTagOrUuidRequest),
  );
}

export function deployByTagOrUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeployByTagOrUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployByTagOrUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployByTagOrUuidRequest' from JSON`,
  );
}

/** @internal */
export const Deployments$inboundSchema: z.ZodType<
  Deployments,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  resource_uuid: z.string().optional(),
  deployment_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_uuid": "resourceUuid",
    "deployment_uuid": "deploymentUuid",
  });
});

/** @internal */
export type Deployments$Outbound = {
  message?: string | undefined;
  resource_uuid?: string | undefined;
  deployment_uuid?: string | undefined;
};

/** @internal */
export const Deployments$outboundSchema: z.ZodType<
  Deployments$Outbound,
  z.ZodTypeDef,
  Deployments
> = z.object({
  message: z.string().optional(),
  resourceUuid: z.string().optional(),
  deploymentUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceUuid: "resource_uuid",
    deploymentUuid: "deployment_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deployments$ {
  /** @deprecated use `Deployments$inboundSchema` instead. */
  export const inboundSchema = Deployments$inboundSchema;
  /** @deprecated use `Deployments$outboundSchema` instead. */
  export const outboundSchema = Deployments$outboundSchema;
  /** @deprecated use `Deployments$Outbound` instead. */
  export type Outbound = Deployments$Outbound;
}

export function deploymentsToJSON(deployments: Deployments): string {
  return JSON.stringify(Deployments$outboundSchema.parse(deployments));
}

export function deploymentsFromJSON(
  jsonString: string,
): SafeParseResult<Deployments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deployments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deployments' from JSON`,
  );
}

/** @internal */
export const DeployByTagOrUuidResponseBody$inboundSchema: z.ZodType<
  DeployByTagOrUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployments: z.array(z.lazy(() => Deployments$inboundSchema)).optional(),
});

/** @internal */
export type DeployByTagOrUuidResponseBody$Outbound = {
  deployments?: Array<Deployments$Outbound> | undefined;
};

/** @internal */
export const DeployByTagOrUuidResponseBody$outboundSchema: z.ZodType<
  DeployByTagOrUuidResponseBody$Outbound,
  z.ZodTypeDef,
  DeployByTagOrUuidResponseBody
> = z.object({
  deployments: z.array(z.lazy(() => Deployments$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployByTagOrUuidResponseBody$ {
  /** @deprecated use `DeployByTagOrUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeployByTagOrUuidResponseBody$inboundSchema;
  /** @deprecated use `DeployByTagOrUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeployByTagOrUuidResponseBody$outboundSchema;
  /** @deprecated use `DeployByTagOrUuidResponseBody$Outbound` instead. */
  export type Outbound = DeployByTagOrUuidResponseBody$Outbound;
}

export function deployByTagOrUuidResponseBodyToJSON(
  deployByTagOrUuidResponseBody: DeployByTagOrUuidResponseBody,
): string {
  return JSON.stringify(
    DeployByTagOrUuidResponseBody$outboundSchema.parse(
      deployByTagOrUuidResponseBody,
    ),
  );
}

export function deployByTagOrUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeployByTagOrUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployByTagOrUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployByTagOrUuidResponseBody' from JSON`,
  );
}
