/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How to set redirect with Traefik / Caddy. www<->non-www.
 */
export const CreateDockerimageApplicationRedirect = {
  Www: "www",
  NonWww: "non-www",
  Both: "both",
} as const;
/**
 * How to set redirect with Traefik / Caddy. www<->non-www.
 */
export type CreateDockerimageApplicationRedirect = ClosedEnum<
  typeof CreateDockerimageApplicationRedirect
>;

/**
 * Application object that needs to be created.
 */
export type CreateDockerimageApplicationRequestBody = {
  /**
   * The project UUID.
   */
  projectUuid: string;
  /**
   * The server UUID.
   */
  serverUuid: string;
  /**
   * The environment name.
   */
  environmentName: string;
  /**
   * The docker registry image name.
   */
  dockerRegistryImageName: string;
  /**
   * The docker registry image tag.
   */
  dockerRegistryImageTag?: string | undefined;
  /**
   * The ports to expose.
   */
  portsExposes: string;
  /**
   * The destination UUID.
   */
  destinationUuid?: string | undefined;
  /**
   * The application name.
   */
  name?: string | undefined;
  /**
   * The application description.
   */
  description?: string | undefined;
  /**
   * The application domains.
   */
  domains?: string | undefined;
  /**
   * The ports mappings.
   */
  portsMappings?: string | undefined;
  /**
   * Health check enabled.
   */
  healthCheckEnabled?: boolean | undefined;
  /**
   * Health check path.
   */
  healthCheckPath?: string | undefined;
  /**
   * Health check port.
   */
  healthCheckPort?: string | null | undefined;
  /**
   * Health check host.
   */
  healthCheckHost?: string | null | undefined;
  /**
   * Health check method.
   */
  healthCheckMethod?: string | undefined;
  /**
   * Health check return code.
   */
  healthCheckReturnCode?: number | undefined;
  /**
   * Health check scheme.
   */
  healthCheckScheme?: string | undefined;
  /**
   * Health check response text.
   */
  healthCheckResponseText?: string | null | undefined;
  /**
   * Health check interval in seconds.
   */
  healthCheckInterval?: number | undefined;
  /**
   * Health check timeout in seconds.
   */
  healthCheckTimeout?: number | undefined;
  /**
   * Health check retries count.
   */
  healthCheckRetries?: number | undefined;
  /**
   * Health check start period in seconds.
   */
  healthCheckStartPeriod?: number | undefined;
  /**
   * Memory limit.
   */
  limitsMemory?: string | undefined;
  /**
   * Memory swap limit.
   */
  limitsMemorySwap?: string | undefined;
  /**
   * Memory swappiness.
   */
  limitsMemorySwappiness?: number | undefined;
  /**
   * Memory reservation.
   */
  limitsMemoryReservation?: string | undefined;
  /**
   * CPU limit.
   */
  limitsCpus?: string | undefined;
  /**
   * CPU set.
   */
  limitsCpuset?: string | null | undefined;
  /**
   * CPU shares.
   */
  limitsCpuShares?: number | undefined;
  /**
   * Custom labels.
   */
  customLabels?: string | undefined;
  /**
   * Custom docker run options.
   */
  customDockerRunOptions?: string | undefined;
  /**
   * Post deployment command.
   */
  postDeploymentCommand?: string | undefined;
  /**
   * Post deployment command container.
   */
  postDeploymentCommandContainer?: string | undefined;
  /**
   * Pre deployment command.
   */
  preDeploymentCommand?: string | undefined;
  /**
   * Pre deployment command container.
   */
  preDeploymentCommandContainer?: string | undefined;
  /**
   * Manual webhook secret for Github.
   */
  manualWebhookSecretGithub?: string | undefined;
  /**
   * Manual webhook secret for Gitlab.
   */
  manualWebhookSecretGitlab?: string | undefined;
  /**
   * Manual webhook secret for Bitbucket.
   */
  manualWebhookSecretBitbucket?: string | undefined;
  /**
   * Manual webhook secret for Gitea.
   */
  manualWebhookSecretGitea?: string | undefined;
  /**
   * How to set redirect with Traefik / Caddy. www<->non-www.
   */
  redirect?: CreateDockerimageApplicationRedirect | null | undefined;
  /**
   * The flag to indicate if the application should be deployed instantly.
   */
  instantDeploy?: boolean | undefined;
  /**
   * Use build server.
   */
  useBuildServer?: boolean | null | undefined;
};

/** @internal */
export const CreateDockerimageApplicationRedirect$inboundSchema:
  z.ZodNativeEnum<typeof CreateDockerimageApplicationRedirect> = z.nativeEnum(
    CreateDockerimageApplicationRedirect,
  );

/** @internal */
export const CreateDockerimageApplicationRedirect$outboundSchema:
  z.ZodNativeEnum<typeof CreateDockerimageApplicationRedirect> =
    CreateDockerimageApplicationRedirect$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDockerimageApplicationRedirect$ {
  /** @deprecated use `CreateDockerimageApplicationRedirect$inboundSchema` instead. */
  export const inboundSchema =
    CreateDockerimageApplicationRedirect$inboundSchema;
  /** @deprecated use `CreateDockerimageApplicationRedirect$outboundSchema` instead. */
  export const outboundSchema =
    CreateDockerimageApplicationRedirect$outboundSchema;
}

/** @internal */
export const CreateDockerimageApplicationRequestBody$inboundSchema: z.ZodType<
  CreateDockerimageApplicationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_uuid: z.string(),
  server_uuid: z.string(),
  environment_name: z.string(),
  docker_registry_image_name: z.string(),
  docker_registry_image_tag: z.string().optional(),
  ports_exposes: z.string(),
  destination_uuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  domains: z.string().optional(),
  ports_mappings: z.string().optional(),
  health_check_enabled: z.boolean().optional(),
  health_check_path: z.string().optional(),
  health_check_port: z.nullable(z.string()).optional(),
  health_check_host: z.nullable(z.string()).optional(),
  health_check_method: z.string().optional(),
  health_check_return_code: z.number().int().optional(),
  health_check_scheme: z.string().optional(),
  health_check_response_text: z.nullable(z.string()).optional(),
  health_check_interval: z.number().int().optional(),
  health_check_timeout: z.number().int().optional(),
  health_check_retries: z.number().int().optional(),
  health_check_start_period: z.number().int().optional(),
  limits_memory: z.string().optional(),
  limits_memory_swap: z.string().optional(),
  limits_memory_swappiness: z.number().int().optional(),
  limits_memory_reservation: z.string().optional(),
  limits_cpus: z.string().optional(),
  limits_cpuset: z.nullable(z.string()).optional(),
  limits_cpu_shares: z.number().int().optional(),
  custom_labels: z.string().optional(),
  custom_docker_run_options: z.string().optional(),
  post_deployment_command: z.string().optional(),
  post_deployment_command_container: z.string().optional(),
  pre_deployment_command: z.string().optional(),
  pre_deployment_command_container: z.string().optional(),
  manual_webhook_secret_github: z.string().optional(),
  manual_webhook_secret_gitlab: z.string().optional(),
  manual_webhook_secret_bitbucket: z.string().optional(),
  manual_webhook_secret_gitea: z.string().optional(),
  redirect: z.nullable(CreateDockerimageApplicationRedirect$inboundSchema)
    .optional(),
  instant_deploy: z.boolean().optional(),
  use_build_server: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_uuid": "projectUuid",
    "server_uuid": "serverUuid",
    "environment_name": "environmentName",
    "docker_registry_image_name": "dockerRegistryImageName",
    "docker_registry_image_tag": "dockerRegistryImageTag",
    "ports_exposes": "portsExposes",
    "destination_uuid": "destinationUuid",
    "ports_mappings": "portsMappings",
    "health_check_enabled": "healthCheckEnabled",
    "health_check_path": "healthCheckPath",
    "health_check_port": "healthCheckPort",
    "health_check_host": "healthCheckHost",
    "health_check_method": "healthCheckMethod",
    "health_check_return_code": "healthCheckReturnCode",
    "health_check_scheme": "healthCheckScheme",
    "health_check_response_text": "healthCheckResponseText",
    "health_check_interval": "healthCheckInterval",
    "health_check_timeout": "healthCheckTimeout",
    "health_check_retries": "healthCheckRetries",
    "health_check_start_period": "healthCheckStartPeriod",
    "limits_memory": "limitsMemory",
    "limits_memory_swap": "limitsMemorySwap",
    "limits_memory_swappiness": "limitsMemorySwappiness",
    "limits_memory_reservation": "limitsMemoryReservation",
    "limits_cpus": "limitsCpus",
    "limits_cpuset": "limitsCpuset",
    "limits_cpu_shares": "limitsCpuShares",
    "custom_labels": "customLabels",
    "custom_docker_run_options": "customDockerRunOptions",
    "post_deployment_command": "postDeploymentCommand",
    "post_deployment_command_container": "postDeploymentCommandContainer",
    "pre_deployment_command": "preDeploymentCommand",
    "pre_deployment_command_container": "preDeploymentCommandContainer",
    "manual_webhook_secret_github": "manualWebhookSecretGithub",
    "manual_webhook_secret_gitlab": "manualWebhookSecretGitlab",
    "manual_webhook_secret_bitbucket": "manualWebhookSecretBitbucket",
    "manual_webhook_secret_gitea": "manualWebhookSecretGitea",
    "instant_deploy": "instantDeploy",
    "use_build_server": "useBuildServer",
  });
});

/** @internal */
export type CreateDockerimageApplicationRequestBody$Outbound = {
  project_uuid: string;
  server_uuid: string;
  environment_name: string;
  docker_registry_image_name: string;
  docker_registry_image_tag?: string | undefined;
  ports_exposes: string;
  destination_uuid?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  domains?: string | undefined;
  ports_mappings?: string | undefined;
  health_check_enabled?: boolean | undefined;
  health_check_path?: string | undefined;
  health_check_port?: string | null | undefined;
  health_check_host?: string | null | undefined;
  health_check_method?: string | undefined;
  health_check_return_code?: number | undefined;
  health_check_scheme?: string | undefined;
  health_check_response_text?: string | null | undefined;
  health_check_interval?: number | undefined;
  health_check_timeout?: number | undefined;
  health_check_retries?: number | undefined;
  health_check_start_period?: number | undefined;
  limits_memory?: string | undefined;
  limits_memory_swap?: string | undefined;
  limits_memory_swappiness?: number | undefined;
  limits_memory_reservation?: string | undefined;
  limits_cpus?: string | undefined;
  limits_cpuset?: string | null | undefined;
  limits_cpu_shares?: number | undefined;
  custom_labels?: string | undefined;
  custom_docker_run_options?: string | undefined;
  post_deployment_command?: string | undefined;
  post_deployment_command_container?: string | undefined;
  pre_deployment_command?: string | undefined;
  pre_deployment_command_container?: string | undefined;
  manual_webhook_secret_github?: string | undefined;
  manual_webhook_secret_gitlab?: string | undefined;
  manual_webhook_secret_bitbucket?: string | undefined;
  manual_webhook_secret_gitea?: string | undefined;
  redirect?: string | null | undefined;
  instant_deploy?: boolean | undefined;
  use_build_server?: boolean | null | undefined;
};

/** @internal */
export const CreateDockerimageApplicationRequestBody$outboundSchema: z.ZodType<
  CreateDockerimageApplicationRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDockerimageApplicationRequestBody
> = z.object({
  projectUuid: z.string(),
  serverUuid: z.string(),
  environmentName: z.string(),
  dockerRegistryImageName: z.string(),
  dockerRegistryImageTag: z.string().optional(),
  portsExposes: z.string(),
  destinationUuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  domains: z.string().optional(),
  portsMappings: z.string().optional(),
  healthCheckEnabled: z.boolean().optional(),
  healthCheckPath: z.string().optional(),
  healthCheckPort: z.nullable(z.string()).optional(),
  healthCheckHost: z.nullable(z.string()).optional(),
  healthCheckMethod: z.string().optional(),
  healthCheckReturnCode: z.number().int().optional(),
  healthCheckScheme: z.string().optional(),
  healthCheckResponseText: z.nullable(z.string()).optional(),
  healthCheckInterval: z.number().int().optional(),
  healthCheckTimeout: z.number().int().optional(),
  healthCheckRetries: z.number().int().optional(),
  healthCheckStartPeriod: z.number().int().optional(),
  limitsMemory: z.string().optional(),
  limitsMemorySwap: z.string().optional(),
  limitsMemorySwappiness: z.number().int().optional(),
  limitsMemoryReservation: z.string().optional(),
  limitsCpus: z.string().optional(),
  limitsCpuset: z.nullable(z.string()).optional(),
  limitsCpuShares: z.number().int().optional(),
  customLabels: z.string().optional(),
  customDockerRunOptions: z.string().optional(),
  postDeploymentCommand: z.string().optional(),
  postDeploymentCommandContainer: z.string().optional(),
  preDeploymentCommand: z.string().optional(),
  preDeploymentCommandContainer: z.string().optional(),
  manualWebhookSecretGithub: z.string().optional(),
  manualWebhookSecretGitlab: z.string().optional(),
  manualWebhookSecretBitbucket: z.string().optional(),
  manualWebhookSecretGitea: z.string().optional(),
  redirect: z.nullable(CreateDockerimageApplicationRedirect$outboundSchema)
    .optional(),
  instantDeploy: z.boolean().optional(),
  useBuildServer: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectUuid: "project_uuid",
    serverUuid: "server_uuid",
    environmentName: "environment_name",
    dockerRegistryImageName: "docker_registry_image_name",
    dockerRegistryImageTag: "docker_registry_image_tag",
    portsExposes: "ports_exposes",
    destinationUuid: "destination_uuid",
    portsMappings: "ports_mappings",
    healthCheckEnabled: "health_check_enabled",
    healthCheckPath: "health_check_path",
    healthCheckPort: "health_check_port",
    healthCheckHost: "health_check_host",
    healthCheckMethod: "health_check_method",
    healthCheckReturnCode: "health_check_return_code",
    healthCheckScheme: "health_check_scheme",
    healthCheckResponseText: "health_check_response_text",
    healthCheckInterval: "health_check_interval",
    healthCheckTimeout: "health_check_timeout",
    healthCheckRetries: "health_check_retries",
    healthCheckStartPeriod: "health_check_start_period",
    limitsMemory: "limits_memory",
    limitsMemorySwap: "limits_memory_swap",
    limitsMemorySwappiness: "limits_memory_swappiness",
    limitsMemoryReservation: "limits_memory_reservation",
    limitsCpus: "limits_cpus",
    limitsCpuset: "limits_cpuset",
    limitsCpuShares: "limits_cpu_shares",
    customLabels: "custom_labels",
    customDockerRunOptions: "custom_docker_run_options",
    postDeploymentCommand: "post_deployment_command",
    postDeploymentCommandContainer: "post_deployment_command_container",
    preDeploymentCommand: "pre_deployment_command",
    preDeploymentCommandContainer: "pre_deployment_command_container",
    manualWebhookSecretGithub: "manual_webhook_secret_github",
    manualWebhookSecretGitlab: "manual_webhook_secret_gitlab",
    manualWebhookSecretBitbucket: "manual_webhook_secret_bitbucket",
    manualWebhookSecretGitea: "manual_webhook_secret_gitea",
    instantDeploy: "instant_deploy",
    useBuildServer: "use_build_server",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDockerimageApplicationRequestBody$ {
  /** @deprecated use `CreateDockerimageApplicationRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateDockerimageApplicationRequestBody$inboundSchema;
  /** @deprecated use `CreateDockerimageApplicationRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateDockerimageApplicationRequestBody$outboundSchema;
  /** @deprecated use `CreateDockerimageApplicationRequestBody$Outbound` instead. */
  export type Outbound = CreateDockerimageApplicationRequestBody$Outbound;
}

export function createDockerimageApplicationRequestBodyToJSON(
  createDockerimageApplicationRequestBody:
    CreateDockerimageApplicationRequestBody,
): string {
  return JSON.stringify(
    CreateDockerimageApplicationRequestBody$outboundSchema.parse(
      createDockerimageApplicationRequestBody,
    ),
  );
}

export function createDockerimageApplicationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateDockerimageApplicationRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDockerimageApplicationRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateDockerimageApplicationRequestBody' from JSON`,
  );
}
