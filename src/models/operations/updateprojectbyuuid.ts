/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Project updated.
 */
export type UpdateProjectByUuidRequestBody = {
  /**
   * The name of the project.
   */
  name?: string | undefined;
  /**
   * The description of the project.
   */
  description?: string | undefined;
};

export type UpdateProjectByUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * Project updated.
   */
  requestBody: UpdateProjectByUuidRequestBody;
};

/**
 * Project updated.
 */
export type UpdateProjectByUuidResponseBody = {
  uuid?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const UpdateProjectByUuidRequestBody$inboundSchema: z.ZodType<
  UpdateProjectByUuidRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type UpdateProjectByUuidRequestBody$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const UpdateProjectByUuidRequestBody$outboundSchema: z.ZodType<
  UpdateProjectByUuidRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateProjectByUuidRequestBody
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectByUuidRequestBody$ {
  /** @deprecated use `UpdateProjectByUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectByUuidRequestBody$inboundSchema;
  /** @deprecated use `UpdateProjectByUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectByUuidRequestBody$outboundSchema;
  /** @deprecated use `UpdateProjectByUuidRequestBody$Outbound` instead. */
  export type Outbound = UpdateProjectByUuidRequestBody$Outbound;
}

export function updateProjectByUuidRequestBodyToJSON(
  updateProjectByUuidRequestBody: UpdateProjectByUuidRequestBody,
): string {
  return JSON.stringify(
    UpdateProjectByUuidRequestBody$outboundSchema.parse(
      updateProjectByUuidRequestBody,
    ),
  );
}

export function updateProjectByUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectByUuidRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectByUuidRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectByUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateProjectByUuidRequest$inboundSchema: z.ZodType<
  UpdateProjectByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() => UpdateProjectByUuidRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateProjectByUuidRequest$Outbound = {
  uuid: string;
  RequestBody: UpdateProjectByUuidRequestBody$Outbound;
};

/** @internal */
export const UpdateProjectByUuidRequest$outboundSchema: z.ZodType<
  UpdateProjectByUuidRequest$Outbound,
  z.ZodTypeDef,
  UpdateProjectByUuidRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() => UpdateProjectByUuidRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectByUuidRequest$ {
  /** @deprecated use `UpdateProjectByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectByUuidRequest$inboundSchema;
  /** @deprecated use `UpdateProjectByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectByUuidRequest$outboundSchema;
  /** @deprecated use `UpdateProjectByUuidRequest$Outbound` instead. */
  export type Outbound = UpdateProjectByUuidRequest$Outbound;
}

export function updateProjectByUuidRequestToJSON(
  updateProjectByUuidRequest: UpdateProjectByUuidRequest,
): string {
  return JSON.stringify(
    UpdateProjectByUuidRequest$outboundSchema.parse(updateProjectByUuidRequest),
  );
}

export function updateProjectByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectByUuidRequest' from JSON`,
  );
}

/** @internal */
export const UpdateProjectByUuidResponseBody$inboundSchema: z.ZodType<
  UpdateProjectByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type UpdateProjectByUuidResponseBody$Outbound = {
  uuid?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const UpdateProjectByUuidResponseBody$outboundSchema: z.ZodType<
  UpdateProjectByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateProjectByUuidResponseBody
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectByUuidResponseBody$ {
  /** @deprecated use `UpdateProjectByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectByUuidResponseBody$inboundSchema;
  /** @deprecated use `UpdateProjectByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectByUuidResponseBody$outboundSchema;
  /** @deprecated use `UpdateProjectByUuidResponseBody$Outbound` instead. */
  export type Outbound = UpdateProjectByUuidResponseBody$Outbound;
}

export function updateProjectByUuidResponseBodyToJSON(
  updateProjectByUuidResponseBody: UpdateProjectByUuidResponseBody,
): string {
  return JSON.stringify(
    UpdateProjectByUuidResponseBody$outboundSchema.parse(
      updateProjectByUuidResponseBody,
    ),
  );
}

export function updateProjectByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectByUuidResponseBody' from JSON`,
  );
}
