/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValidateServerByUuidRequest = {
  /**
   * Server UUID
   */
  uuid: string;
};

/**
 * Server validation started.
 */
export type ValidateServerByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const ValidateServerByUuidRequest$inboundSchema: z.ZodType<
  ValidateServerByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type ValidateServerByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const ValidateServerByUuidRequest$outboundSchema: z.ZodType<
  ValidateServerByUuidRequest$Outbound,
  z.ZodTypeDef,
  ValidateServerByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateServerByUuidRequest$ {
  /** @deprecated use `ValidateServerByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = ValidateServerByUuidRequest$inboundSchema;
  /** @deprecated use `ValidateServerByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = ValidateServerByUuidRequest$outboundSchema;
  /** @deprecated use `ValidateServerByUuidRequest$Outbound` instead. */
  export type Outbound = ValidateServerByUuidRequest$Outbound;
}

export function validateServerByUuidRequestToJSON(
  validateServerByUuidRequest: ValidateServerByUuidRequest,
): string {
  return JSON.stringify(
    ValidateServerByUuidRequest$outboundSchema.parse(
      validateServerByUuidRequest,
    ),
  );
}

export function validateServerByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<ValidateServerByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateServerByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateServerByUuidRequest' from JSON`,
  );
}

/** @internal */
export const ValidateServerByUuidResponseBody$inboundSchema: z.ZodType<
  ValidateServerByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type ValidateServerByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const ValidateServerByUuidResponseBody$outboundSchema: z.ZodType<
  ValidateServerByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  ValidateServerByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateServerByUuidResponseBody$ {
  /** @deprecated use `ValidateServerByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = ValidateServerByUuidResponseBody$inboundSchema;
  /** @deprecated use `ValidateServerByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = ValidateServerByUuidResponseBody$outboundSchema;
  /** @deprecated use `ValidateServerByUuidResponseBody$Outbound` instead. */
  export type Outbound = ValidateServerByUuidResponseBody$Outbound;
}

export function validateServerByUuidResponseBodyToJSON(
  validateServerByUuidResponseBody: ValidateServerByUuidResponseBody,
): string {
  return JSON.stringify(
    ValidateServerByUuidResponseBody$outboundSchema.parse(
      validateServerByUuidResponseBody,
    ),
  );
}

export function validateServerByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ValidateServerByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateServerByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateServerByUuidResponseBody' from JSON`,
  );
}
