/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StopDatabaseByUuidRequest = {
  /**
   * UUID of the database.
   */
  uuid: string;
};

/**
 * Stop database.
 */
export type StopDatabaseByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const StopDatabaseByUuidRequest$inboundSchema: z.ZodType<
  StopDatabaseByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type StopDatabaseByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const StopDatabaseByUuidRequest$outboundSchema: z.ZodType<
  StopDatabaseByUuidRequest$Outbound,
  z.ZodTypeDef,
  StopDatabaseByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopDatabaseByUuidRequest$ {
  /** @deprecated use `StopDatabaseByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = StopDatabaseByUuidRequest$inboundSchema;
  /** @deprecated use `StopDatabaseByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = StopDatabaseByUuidRequest$outboundSchema;
  /** @deprecated use `StopDatabaseByUuidRequest$Outbound` instead. */
  export type Outbound = StopDatabaseByUuidRequest$Outbound;
}

export function stopDatabaseByUuidRequestToJSON(
  stopDatabaseByUuidRequest: StopDatabaseByUuidRequest,
): string {
  return JSON.stringify(
    StopDatabaseByUuidRequest$outboundSchema.parse(stopDatabaseByUuidRequest),
  );
}

export function stopDatabaseByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<StopDatabaseByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopDatabaseByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopDatabaseByUuidRequest' from JSON`,
  );
}

/** @internal */
export const StopDatabaseByUuidResponseBody$inboundSchema: z.ZodType<
  StopDatabaseByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type StopDatabaseByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const StopDatabaseByUuidResponseBody$outboundSchema: z.ZodType<
  StopDatabaseByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  StopDatabaseByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopDatabaseByUuidResponseBody$ {
  /** @deprecated use `StopDatabaseByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = StopDatabaseByUuidResponseBody$inboundSchema;
  /** @deprecated use `StopDatabaseByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = StopDatabaseByUuidResponseBody$outboundSchema;
  /** @deprecated use `StopDatabaseByUuidResponseBody$Outbound` instead. */
  export type Outbound = StopDatabaseByUuidResponseBody$Outbound;
}

export function stopDatabaseByUuidResponseBodyToJSON(
  stopDatabaseByUuidResponseBody: StopDatabaseByUuidResponseBody,
): string {
  return JSON.stringify(
    StopDatabaseByUuidResponseBody$outboundSchema.parse(
      stopDatabaseByUuidResponseBody,
    ),
  );
}

export function stopDatabaseByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StopDatabaseByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopDatabaseByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopDatabaseByUuidResponseBody' from JSON`,
  );
}
