/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteServerByUuidRequest = {
  /**
   * UUID of the server.
   */
  uuid: string;
};

/**
 * Server deleted.
 */
export type DeleteServerByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteServerByUuidRequest$inboundSchema: z.ZodType<
  DeleteServerByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type DeleteServerByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const DeleteServerByUuidRequest$outboundSchema: z.ZodType<
  DeleteServerByUuidRequest$Outbound,
  z.ZodTypeDef,
  DeleteServerByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteServerByUuidRequest$ {
  /** @deprecated use `DeleteServerByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteServerByUuidRequest$inboundSchema;
  /** @deprecated use `DeleteServerByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteServerByUuidRequest$outboundSchema;
  /** @deprecated use `DeleteServerByUuidRequest$Outbound` instead. */
  export type Outbound = DeleteServerByUuidRequest$Outbound;
}

export function deleteServerByUuidRequestToJSON(
  deleteServerByUuidRequest: DeleteServerByUuidRequest,
): string {
  return JSON.stringify(
    DeleteServerByUuidRequest$outboundSchema.parse(deleteServerByUuidRequest),
  );
}

export function deleteServerByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteServerByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteServerByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteServerByUuidRequest' from JSON`,
  );
}

/** @internal */
export const DeleteServerByUuidResponseBody$inboundSchema: z.ZodType<
  DeleteServerByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteServerByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteServerByUuidResponseBody$outboundSchema: z.ZodType<
  DeleteServerByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteServerByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteServerByUuidResponseBody$ {
  /** @deprecated use `DeleteServerByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteServerByUuidResponseBody$inboundSchema;
  /** @deprecated use `DeleteServerByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteServerByUuidResponseBody$outboundSchema;
  /** @deprecated use `DeleteServerByUuidResponseBody$Outbound` instead. */
  export type Outbound = DeleteServerByUuidResponseBody$Outbound;
}

export function deleteServerByUuidResponseBodyToJSON(
  deleteServerByUuidResponseBody: DeleteServerByUuidResponseBody,
): string {
  return JSON.stringify(
    DeleteServerByUuidResponseBody$outboundSchema.parse(
      deleteServerByUuidResponseBody,
    ),
  );
}

export function deleteServerByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteServerByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteServerByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteServerByUuidResponseBody' from JSON`,
  );
}
