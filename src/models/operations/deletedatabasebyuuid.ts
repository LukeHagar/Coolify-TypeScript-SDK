/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDatabaseByUuidRequest = {
  /**
   * UUID of the database.
   */
  uuid: string;
  /**
   * Delete configurations.
   */
  deleteConfigurations?: boolean | undefined;
  /**
   * Delete volumes.
   */
  deleteVolumes?: boolean | undefined;
  /**
   * Run docker cleanup.
   */
  dockerCleanup?: boolean | undefined;
  /**
   * Delete connected networks.
   */
  deleteConnectedNetworks?: boolean | undefined;
};

/**
 * Database deleted.
 */
export type DeleteDatabaseByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteDatabaseByUuidRequest$inboundSchema: z.ZodType<
  DeleteDatabaseByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  delete_configurations: z.boolean().default(true),
  delete_volumes: z.boolean().default(true),
  docker_cleanup: z.boolean().default(true),
  delete_connected_networks: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "delete_configurations": "deleteConfigurations",
    "delete_volumes": "deleteVolumes",
    "docker_cleanup": "dockerCleanup",
    "delete_connected_networks": "deleteConnectedNetworks",
  });
});

/** @internal */
export type DeleteDatabaseByUuidRequest$Outbound = {
  uuid: string;
  delete_configurations: boolean;
  delete_volumes: boolean;
  docker_cleanup: boolean;
  delete_connected_networks: boolean;
};

/** @internal */
export const DeleteDatabaseByUuidRequest$outboundSchema: z.ZodType<
  DeleteDatabaseByUuidRequest$Outbound,
  z.ZodTypeDef,
  DeleteDatabaseByUuidRequest
> = z.object({
  uuid: z.string(),
  deleteConfigurations: z.boolean().default(true),
  deleteVolumes: z.boolean().default(true),
  dockerCleanup: z.boolean().default(true),
  deleteConnectedNetworks: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    deleteConfigurations: "delete_configurations",
    deleteVolumes: "delete_volumes",
    dockerCleanup: "docker_cleanup",
    deleteConnectedNetworks: "delete_connected_networks",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatabaseByUuidRequest$ {
  /** @deprecated use `DeleteDatabaseByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDatabaseByUuidRequest$inboundSchema;
  /** @deprecated use `DeleteDatabaseByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDatabaseByUuidRequest$outboundSchema;
  /** @deprecated use `DeleteDatabaseByUuidRequest$Outbound` instead. */
  export type Outbound = DeleteDatabaseByUuidRequest$Outbound;
}

export function deleteDatabaseByUuidRequestToJSON(
  deleteDatabaseByUuidRequest: DeleteDatabaseByUuidRequest,
): string {
  return JSON.stringify(
    DeleteDatabaseByUuidRequest$outboundSchema.parse(
      deleteDatabaseByUuidRequest,
    ),
  );
}

export function deleteDatabaseByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatabaseByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatabaseByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatabaseByUuidRequest' from JSON`,
  );
}

/** @internal */
export const DeleteDatabaseByUuidResponseBody$inboundSchema: z.ZodType<
  DeleteDatabaseByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteDatabaseByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteDatabaseByUuidResponseBody$outboundSchema: z.ZodType<
  DeleteDatabaseByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteDatabaseByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatabaseByUuidResponseBody$ {
  /** @deprecated use `DeleteDatabaseByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteDatabaseByUuidResponseBody$inboundSchema;
  /** @deprecated use `DeleteDatabaseByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteDatabaseByUuidResponseBody$outboundSchema;
  /** @deprecated use `DeleteDatabaseByUuidResponseBody$Outbound` instead. */
  export type Outbound = DeleteDatabaseByUuidResponseBody$Outbound;
}

export function deleteDatabaseByUuidResponseBodyToJSON(
  deleteDatabaseByUuidResponseBody: DeleteDatabaseByUuidResponseBody,
): string {
  return JSON.stringify(
    DeleteDatabaseByUuidResponseBody$outboundSchema.parse(
      deleteDatabaseByUuidResponseBody,
    ),
  );
}

export function deleteDatabaseByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatabaseByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatabaseByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatabaseByUuidResponseBody' from JSON`,
  );
}
