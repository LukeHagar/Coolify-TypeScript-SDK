/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Database data
 */
export type UpdateDatabaseByUuidRequestBody = {
  /**
   * Name of the database
   */
  name?: string | undefined;
  /**
   * Description of the database
   */
  description?: string | undefined;
  /**
   * Docker Image of the database
   */
  image?: string | undefined;
  /**
   * Is the database public?
   */
  isPublic?: boolean | undefined;
  /**
   * Public port of the database
   */
  publicPort?: number | undefined;
  /**
   * Memory limit of the database
   */
  limitsMemory?: string | undefined;
  /**
   * Memory swap limit of the database
   */
  limitsMemorySwap?: string | undefined;
  /**
   * Memory swappiness of the database
   */
  limitsMemorySwappiness?: number | undefined;
  /**
   * Memory reservation of the database
   */
  limitsMemoryReservation?: string | undefined;
  /**
   * CPU limit of the database
   */
  limitsCpus?: string | undefined;
  /**
   * CPU set of the database
   */
  limitsCpuset?: string | undefined;
  /**
   * CPU shares of the database
   */
  limitsCpuShares?: number | undefined;
  /**
   * PostgreSQL user
   */
  postgresUser?: string | undefined;
  /**
   * PostgreSQL password
   */
  postgresPassword?: string | undefined;
  /**
   * PostgreSQL database
   */
  postgresDb?: string | undefined;
  /**
   * PostgreSQL initdb args
   */
  postgresInitdbArgs?: string | undefined;
  /**
   * PostgreSQL host auth method
   */
  postgresHostAuthMethod?: string | undefined;
  /**
   * PostgreSQL conf
   */
  postgresConf?: string | undefined;
  /**
   * Clickhouse admin user
   */
  clickhouseAdminUser?: string | undefined;
  /**
   * Clickhouse admin password
   */
  clickhouseAdminPassword?: string | undefined;
  /**
   * DragonFly password
   */
  dragonflyPassword?: string | undefined;
  /**
   * Redis password
   */
  redisPassword?: string | undefined;
  /**
   * Redis conf
   */
  redisConf?: string | undefined;
  /**
   * KeyDB password
   */
  keydbPassword?: string | undefined;
  /**
   * KeyDB conf
   */
  keydbConf?: string | undefined;
  /**
   * MariaDB conf
   */
  mariadbConf?: string | undefined;
  /**
   * MariaDB root password
   */
  mariadbRootPassword?: string | undefined;
  /**
   * MariaDB user
   */
  mariadbUser?: string | undefined;
  /**
   * MariaDB password
   */
  mariadbPassword?: string | undefined;
  /**
   * MariaDB database
   */
  mariadbDatabase?: string | undefined;
  /**
   * Mongo conf
   */
  mongoConf?: string | undefined;
  /**
   * Mongo initdb root username
   */
  mongoInitdbRootUsername?: string | undefined;
  /**
   * Mongo initdb root password
   */
  mongoInitdbRootPassword?: string | undefined;
  /**
   * Mongo initdb init database
   */
  mongoInitdbInitDatabase?: string | undefined;
  /**
   * MySQL root password
   */
  mysqlRootPassword?: string | undefined;
  /**
   * MySQL user
   */
  mysqlUser?: string | undefined;
  /**
   * MySQL database
   */
  mysqlDatabase?: string | undefined;
  /**
   * MySQL conf
   */
  mysqlConf?: string | undefined;
};

export type UpdateDatabaseByUuidRequest = {
  /**
   * UUID of the database.
   */
  uuid: string;
  /**
   * Database data
   */
  requestBody: UpdateDatabaseByUuidRequestBody;
};

/** @internal */
export const UpdateDatabaseByUuidRequestBody$inboundSchema: z.ZodType<
  UpdateDatabaseByUuidRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  image: z.string().optional(),
  is_public: z.boolean().optional(),
  public_port: z.number().int().optional(),
  limits_memory: z.string().optional(),
  limits_memory_swap: z.string().optional(),
  limits_memory_swappiness: z.number().int().optional(),
  limits_memory_reservation: z.string().optional(),
  limits_cpus: z.string().optional(),
  limits_cpuset: z.string().optional(),
  limits_cpu_shares: z.number().int().optional(),
  postgres_user: z.string().optional(),
  postgres_password: z.string().optional(),
  postgres_db: z.string().optional(),
  postgres_initdb_args: z.string().optional(),
  postgres_host_auth_method: z.string().optional(),
  postgres_conf: z.string().optional(),
  clickhouse_admin_user: z.string().optional(),
  clickhouse_admin_password: z.string().optional(),
  dragonfly_password: z.string().optional(),
  redis_password: z.string().optional(),
  redis_conf: z.string().optional(),
  keydb_password: z.string().optional(),
  keydb_conf: z.string().optional(),
  mariadb_conf: z.string().optional(),
  mariadb_root_password: z.string().optional(),
  mariadb_user: z.string().optional(),
  mariadb_password: z.string().optional(),
  mariadb_database: z.string().optional(),
  mongo_conf: z.string().optional(),
  mongo_initdb_root_username: z.string().optional(),
  mongo_initdb_root_password: z.string().optional(),
  mongo_initdb_init_database: z.string().optional(),
  mysql_root_password: z.string().optional(),
  mysql_user: z.string().optional(),
  mysql_database: z.string().optional(),
  mysql_conf: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_public": "isPublic",
    "public_port": "publicPort",
    "limits_memory": "limitsMemory",
    "limits_memory_swap": "limitsMemorySwap",
    "limits_memory_swappiness": "limitsMemorySwappiness",
    "limits_memory_reservation": "limitsMemoryReservation",
    "limits_cpus": "limitsCpus",
    "limits_cpuset": "limitsCpuset",
    "limits_cpu_shares": "limitsCpuShares",
    "postgres_user": "postgresUser",
    "postgres_password": "postgresPassword",
    "postgres_db": "postgresDb",
    "postgres_initdb_args": "postgresInitdbArgs",
    "postgres_host_auth_method": "postgresHostAuthMethod",
    "postgres_conf": "postgresConf",
    "clickhouse_admin_user": "clickhouseAdminUser",
    "clickhouse_admin_password": "clickhouseAdminPassword",
    "dragonfly_password": "dragonflyPassword",
    "redis_password": "redisPassword",
    "redis_conf": "redisConf",
    "keydb_password": "keydbPassword",
    "keydb_conf": "keydbConf",
    "mariadb_conf": "mariadbConf",
    "mariadb_root_password": "mariadbRootPassword",
    "mariadb_user": "mariadbUser",
    "mariadb_password": "mariadbPassword",
    "mariadb_database": "mariadbDatabase",
    "mongo_conf": "mongoConf",
    "mongo_initdb_root_username": "mongoInitdbRootUsername",
    "mongo_initdb_root_password": "mongoInitdbRootPassword",
    "mongo_initdb_init_database": "mongoInitdbInitDatabase",
    "mysql_root_password": "mysqlRootPassword",
    "mysql_user": "mysqlUser",
    "mysql_database": "mysqlDatabase",
    "mysql_conf": "mysqlConf",
  });
});

/** @internal */
export type UpdateDatabaseByUuidRequestBody$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  image?: string | undefined;
  is_public?: boolean | undefined;
  public_port?: number | undefined;
  limits_memory?: string | undefined;
  limits_memory_swap?: string | undefined;
  limits_memory_swappiness?: number | undefined;
  limits_memory_reservation?: string | undefined;
  limits_cpus?: string | undefined;
  limits_cpuset?: string | undefined;
  limits_cpu_shares?: number | undefined;
  postgres_user?: string | undefined;
  postgres_password?: string | undefined;
  postgres_db?: string | undefined;
  postgres_initdb_args?: string | undefined;
  postgres_host_auth_method?: string | undefined;
  postgres_conf?: string | undefined;
  clickhouse_admin_user?: string | undefined;
  clickhouse_admin_password?: string | undefined;
  dragonfly_password?: string | undefined;
  redis_password?: string | undefined;
  redis_conf?: string | undefined;
  keydb_password?: string | undefined;
  keydb_conf?: string | undefined;
  mariadb_conf?: string | undefined;
  mariadb_root_password?: string | undefined;
  mariadb_user?: string | undefined;
  mariadb_password?: string | undefined;
  mariadb_database?: string | undefined;
  mongo_conf?: string | undefined;
  mongo_initdb_root_username?: string | undefined;
  mongo_initdb_root_password?: string | undefined;
  mongo_initdb_init_database?: string | undefined;
  mysql_root_password?: string | undefined;
  mysql_user?: string | undefined;
  mysql_database?: string | undefined;
  mysql_conf?: string | undefined;
};

/** @internal */
export const UpdateDatabaseByUuidRequestBody$outboundSchema: z.ZodType<
  UpdateDatabaseByUuidRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateDatabaseByUuidRequestBody
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  image: z.string().optional(),
  isPublic: z.boolean().optional(),
  publicPort: z.number().int().optional(),
  limitsMemory: z.string().optional(),
  limitsMemorySwap: z.string().optional(),
  limitsMemorySwappiness: z.number().int().optional(),
  limitsMemoryReservation: z.string().optional(),
  limitsCpus: z.string().optional(),
  limitsCpuset: z.string().optional(),
  limitsCpuShares: z.number().int().optional(),
  postgresUser: z.string().optional(),
  postgresPassword: z.string().optional(),
  postgresDb: z.string().optional(),
  postgresInitdbArgs: z.string().optional(),
  postgresHostAuthMethod: z.string().optional(),
  postgresConf: z.string().optional(),
  clickhouseAdminUser: z.string().optional(),
  clickhouseAdminPassword: z.string().optional(),
  dragonflyPassword: z.string().optional(),
  redisPassword: z.string().optional(),
  redisConf: z.string().optional(),
  keydbPassword: z.string().optional(),
  keydbConf: z.string().optional(),
  mariadbConf: z.string().optional(),
  mariadbRootPassword: z.string().optional(),
  mariadbUser: z.string().optional(),
  mariadbPassword: z.string().optional(),
  mariadbDatabase: z.string().optional(),
  mongoConf: z.string().optional(),
  mongoInitdbRootUsername: z.string().optional(),
  mongoInitdbRootPassword: z.string().optional(),
  mongoInitdbInitDatabase: z.string().optional(),
  mysqlRootPassword: z.string().optional(),
  mysqlUser: z.string().optional(),
  mysqlDatabase: z.string().optional(),
  mysqlConf: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    isPublic: "is_public",
    publicPort: "public_port",
    limitsMemory: "limits_memory",
    limitsMemorySwap: "limits_memory_swap",
    limitsMemorySwappiness: "limits_memory_swappiness",
    limitsMemoryReservation: "limits_memory_reservation",
    limitsCpus: "limits_cpus",
    limitsCpuset: "limits_cpuset",
    limitsCpuShares: "limits_cpu_shares",
    postgresUser: "postgres_user",
    postgresPassword: "postgres_password",
    postgresDb: "postgres_db",
    postgresInitdbArgs: "postgres_initdb_args",
    postgresHostAuthMethod: "postgres_host_auth_method",
    postgresConf: "postgres_conf",
    clickhouseAdminUser: "clickhouse_admin_user",
    clickhouseAdminPassword: "clickhouse_admin_password",
    dragonflyPassword: "dragonfly_password",
    redisPassword: "redis_password",
    redisConf: "redis_conf",
    keydbPassword: "keydb_password",
    keydbConf: "keydb_conf",
    mariadbConf: "mariadb_conf",
    mariadbRootPassword: "mariadb_root_password",
    mariadbUser: "mariadb_user",
    mariadbPassword: "mariadb_password",
    mariadbDatabase: "mariadb_database",
    mongoConf: "mongo_conf",
    mongoInitdbRootUsername: "mongo_initdb_root_username",
    mongoInitdbRootPassword: "mongo_initdb_root_password",
    mongoInitdbInitDatabase: "mongo_initdb_init_database",
    mysqlRootPassword: "mysql_root_password",
    mysqlUser: "mysql_user",
    mysqlDatabase: "mysql_database",
    mysqlConf: "mysql_conf",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatabaseByUuidRequestBody$ {
  /** @deprecated use `UpdateDatabaseByUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDatabaseByUuidRequestBody$inboundSchema;
  /** @deprecated use `UpdateDatabaseByUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDatabaseByUuidRequestBody$outboundSchema;
  /** @deprecated use `UpdateDatabaseByUuidRequestBody$Outbound` instead. */
  export type Outbound = UpdateDatabaseByUuidRequestBody$Outbound;
}

export function updateDatabaseByUuidRequestBodyToJSON(
  updateDatabaseByUuidRequestBody: UpdateDatabaseByUuidRequestBody,
): string {
  return JSON.stringify(
    UpdateDatabaseByUuidRequestBody$outboundSchema.parse(
      updateDatabaseByUuidRequestBody,
    ),
  );
}

export function updateDatabaseByUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatabaseByUuidRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatabaseByUuidRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatabaseByUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateDatabaseByUuidRequest$inboundSchema: z.ZodType<
  UpdateDatabaseByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() => UpdateDatabaseByUuidRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDatabaseByUuidRequest$Outbound = {
  uuid: string;
  RequestBody: UpdateDatabaseByUuidRequestBody$Outbound;
};

/** @internal */
export const UpdateDatabaseByUuidRequest$outboundSchema: z.ZodType<
  UpdateDatabaseByUuidRequest$Outbound,
  z.ZodTypeDef,
  UpdateDatabaseByUuidRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() => UpdateDatabaseByUuidRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatabaseByUuidRequest$ {
  /** @deprecated use `UpdateDatabaseByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDatabaseByUuidRequest$inboundSchema;
  /** @deprecated use `UpdateDatabaseByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDatabaseByUuidRequest$outboundSchema;
  /** @deprecated use `UpdateDatabaseByUuidRequest$Outbound` instead. */
  export type Outbound = UpdateDatabaseByUuidRequest$Outbound;
}

export function updateDatabaseByUuidRequestToJSON(
  updateDatabaseByUuidRequest: UpdateDatabaseByUuidRequest,
): string {
  return JSON.stringify(
    UpdateDatabaseByUuidRequest$outboundSchema.parse(
      updateDatabaseByUuidRequest,
    ),
  );
}

export function updateDatabaseByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatabaseByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatabaseByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatabaseByUuidRequest' from JSON`,
  );
}
