/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Env created.
 */
export type CreateEnvByServiceUuidRequestBody = {
  /**
   * The key of the environment variable.
   */
  key?: string | undefined;
  /**
   * The value of the environment variable.
   */
  value?: string | undefined;
  /**
   * The flag to indicate if the environment variable is used in preview deployments.
   */
  isPreview?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is used in build time.
   */
  isBuildTime?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is a literal, nothing espaced.
   */
  isLiteral?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable is multiline.
   */
  isMultiline?: boolean | undefined;
  /**
   * The flag to indicate if the environment variable's value is shown on the UI.
   */
  isShownOnce?: boolean | undefined;
};

export type CreateEnvByServiceUuidRequest = {
  /**
   * UUID of the service.
   */
  uuid: string;
  /**
   * Env created.
   */
  requestBody: CreateEnvByServiceUuidRequestBody;
};

/**
 * Environment variable created.
 */
export type CreateEnvByServiceUuidResponseBody = {
  uuid?: string | undefined;
};

/** @internal */
export const CreateEnvByServiceUuidRequestBody$inboundSchema: z.ZodType<
  CreateEnvByServiceUuidRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  is_preview: z.boolean().optional(),
  is_build_time: z.boolean().optional(),
  is_literal: z.boolean().optional(),
  is_multiline: z.boolean().optional(),
  is_shown_once: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_preview": "isPreview",
    "is_build_time": "isBuildTime",
    "is_literal": "isLiteral",
    "is_multiline": "isMultiline",
    "is_shown_once": "isShownOnce",
  });
});

/** @internal */
export type CreateEnvByServiceUuidRequestBody$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  is_preview?: boolean | undefined;
  is_build_time?: boolean | undefined;
  is_literal?: boolean | undefined;
  is_multiline?: boolean | undefined;
  is_shown_once?: boolean | undefined;
};

/** @internal */
export const CreateEnvByServiceUuidRequestBody$outboundSchema: z.ZodType<
  CreateEnvByServiceUuidRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEnvByServiceUuidRequestBody
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  isPreview: z.boolean().optional(),
  isBuildTime: z.boolean().optional(),
  isLiteral: z.boolean().optional(),
  isMultiline: z.boolean().optional(),
  isShownOnce: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isPreview: "is_preview",
    isBuildTime: "is_build_time",
    isLiteral: "is_literal",
    isMultiline: "is_multiline",
    isShownOnce: "is_shown_once",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvByServiceUuidRequestBody$ {
  /** @deprecated use `CreateEnvByServiceUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateEnvByServiceUuidRequestBody$inboundSchema;
  /** @deprecated use `CreateEnvByServiceUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateEnvByServiceUuidRequestBody$outboundSchema;
  /** @deprecated use `CreateEnvByServiceUuidRequestBody$Outbound` instead. */
  export type Outbound = CreateEnvByServiceUuidRequestBody$Outbound;
}

export function createEnvByServiceUuidRequestBodyToJSON(
  createEnvByServiceUuidRequestBody: CreateEnvByServiceUuidRequestBody,
): string {
  return JSON.stringify(
    CreateEnvByServiceUuidRequestBody$outboundSchema.parse(
      createEnvByServiceUuidRequestBody,
    ),
  );
}

export function createEnvByServiceUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvByServiceUuidRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnvByServiceUuidRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvByServiceUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateEnvByServiceUuidRequest$inboundSchema: z.ZodType<
  CreateEnvByServiceUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  RequestBody: z.lazy(() => CreateEnvByServiceUuidRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateEnvByServiceUuidRequest$Outbound = {
  uuid: string;
  RequestBody: CreateEnvByServiceUuidRequestBody$Outbound;
};

/** @internal */
export const CreateEnvByServiceUuidRequest$outboundSchema: z.ZodType<
  CreateEnvByServiceUuidRequest$Outbound,
  z.ZodTypeDef,
  CreateEnvByServiceUuidRequest
> = z.object({
  uuid: z.string(),
  requestBody: z.lazy(() => CreateEnvByServiceUuidRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvByServiceUuidRequest$ {
  /** @deprecated use `CreateEnvByServiceUuidRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEnvByServiceUuidRequest$inboundSchema;
  /** @deprecated use `CreateEnvByServiceUuidRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEnvByServiceUuidRequest$outboundSchema;
  /** @deprecated use `CreateEnvByServiceUuidRequest$Outbound` instead. */
  export type Outbound = CreateEnvByServiceUuidRequest$Outbound;
}

export function createEnvByServiceUuidRequestToJSON(
  createEnvByServiceUuidRequest: CreateEnvByServiceUuidRequest,
): string {
  return JSON.stringify(
    CreateEnvByServiceUuidRequest$outboundSchema.parse(
      createEnvByServiceUuidRequest,
    ),
  );
}

export function createEnvByServiceUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvByServiceUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnvByServiceUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvByServiceUuidRequest' from JSON`,
  );
}

/** @internal */
export const CreateEnvByServiceUuidResponseBody$inboundSchema: z.ZodType<
  CreateEnvByServiceUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type CreateEnvByServiceUuidResponseBody$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const CreateEnvByServiceUuidResponseBody$outboundSchema: z.ZodType<
  CreateEnvByServiceUuidResponseBody$Outbound,
  z.ZodTypeDef,
  CreateEnvByServiceUuidResponseBody
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvByServiceUuidResponseBody$ {
  /** @deprecated use `CreateEnvByServiceUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateEnvByServiceUuidResponseBody$inboundSchema;
  /** @deprecated use `CreateEnvByServiceUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateEnvByServiceUuidResponseBody$outboundSchema;
  /** @deprecated use `CreateEnvByServiceUuidResponseBody$Outbound` instead. */
  export type Outbound = CreateEnvByServiceUuidResponseBody$Outbound;
}

export function createEnvByServiceUuidResponseBodyToJSON(
  createEnvByServiceUuidResponseBody: CreateEnvByServiceUuidResponseBody,
): string {
  return JSON.stringify(
    CreateEnvByServiceUuidResponseBody$outboundSchema.parse(
      createEnvByServiceUuidResponseBody,
    ),
  );
}

export function createEnvByServiceUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvByServiceUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateEnvByServiceUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvByServiceUuidResponseBody' from JSON`,
  );
}
