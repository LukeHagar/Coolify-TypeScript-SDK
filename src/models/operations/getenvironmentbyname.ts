/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEnvironmentByNameRequest = {
  /**
   * Project UUID
   */
  uuid: string;
  /**
   * Environment name
   */
  environmentName: string;
};

/** @internal */
export const GetEnvironmentByNameRequest$inboundSchema: z.ZodType<
  GetEnvironmentByNameRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  environment_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "environment_name": "environmentName",
  });
});

/** @internal */
export type GetEnvironmentByNameRequest$Outbound = {
  uuid: string;
  environment_name: string;
};

/** @internal */
export const GetEnvironmentByNameRequest$outboundSchema: z.ZodType<
  GetEnvironmentByNameRequest$Outbound,
  z.ZodTypeDef,
  GetEnvironmentByNameRequest
> = z.object({
  uuid: z.string(),
  environmentName: z.string(),
}).transform((v) => {
  return remap$(v, {
    environmentName: "environment_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnvironmentByNameRequest$ {
  /** @deprecated use `GetEnvironmentByNameRequest$inboundSchema` instead. */
  export const inboundSchema = GetEnvironmentByNameRequest$inboundSchema;
  /** @deprecated use `GetEnvironmentByNameRequest$outboundSchema` instead. */
  export const outboundSchema = GetEnvironmentByNameRequest$outboundSchema;
  /** @deprecated use `GetEnvironmentByNameRequest$Outbound` instead. */
  export type Outbound = GetEnvironmentByNameRequest$Outbound;
}

export function getEnvironmentByNameRequestToJSON(
  getEnvironmentByNameRequest: GetEnvironmentByNameRequest,
): string {
  return JSON.stringify(
    GetEnvironmentByNameRequest$outboundSchema.parse(
      getEnvironmentByNameRequest,
    ),
  );
}

export function getEnvironmentByNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEnvironmentByNameRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEnvironmentByNameRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEnvironmentByNameRequest' from JSON`,
  );
}
