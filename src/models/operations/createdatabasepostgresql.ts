/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Database data
 */
export type CreateDatabasePostgresqlRequestBody = {
  /**
   * UUID of the server
   */
  serverUuid: string;
  /**
   * UUID of the project
   */
  projectUuid: string;
  /**
   * Name of the environment
   */
  environmentName: string;
  /**
   * PostgreSQL user
   */
  postgresUser?: string | undefined;
  /**
   * PostgreSQL password
   */
  postgresPassword?: string | undefined;
  /**
   * PostgreSQL database
   */
  postgresDb?: string | undefined;
  /**
   * PostgreSQL initdb args
   */
  postgresInitdbArgs?: string | undefined;
  /**
   * PostgreSQL host auth method
   */
  postgresHostAuthMethod?: string | undefined;
  /**
   * PostgreSQL conf
   */
  postgresConf?: string | undefined;
  /**
   * UUID of the destination if the server has multiple destinations
   */
  destinationUuid?: string | undefined;
  /**
   * Name of the database
   */
  name?: string | undefined;
  /**
   * Description of the database
   */
  description?: string | undefined;
  /**
   * Docker Image of the database
   */
  image?: string | undefined;
  /**
   * Is the database public?
   */
  isPublic?: boolean | undefined;
  /**
   * Public port of the database
   */
  publicPort?: number | undefined;
  /**
   * Memory limit of the database
   */
  limitsMemory?: string | undefined;
  /**
   * Memory swap limit of the database
   */
  limitsMemorySwap?: string | undefined;
  /**
   * Memory swappiness of the database
   */
  limitsMemorySwappiness?: number | undefined;
  /**
   * Memory reservation of the database
   */
  limitsMemoryReservation?: string | undefined;
  /**
   * CPU limit of the database
   */
  limitsCpus?: string | undefined;
  /**
   * CPU set of the database
   */
  limitsCpuset?: string | undefined;
  /**
   * CPU shares of the database
   */
  limitsCpuShares?: number | undefined;
  /**
   * Instant deploy the database
   */
  instantDeploy?: boolean | undefined;
};

/** @internal */
export const CreateDatabasePostgresqlRequestBody$inboundSchema: z.ZodType<
  CreateDatabasePostgresqlRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  server_uuid: z.string(),
  project_uuid: z.string(),
  environment_name: z.string(),
  postgres_user: z.string().optional(),
  postgres_password: z.string().optional(),
  postgres_db: z.string().optional(),
  postgres_initdb_args: z.string().optional(),
  postgres_host_auth_method: z.string().optional(),
  postgres_conf: z.string().optional(),
  destination_uuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  image: z.string().optional(),
  is_public: z.boolean().optional(),
  public_port: z.number().int().optional(),
  limits_memory: z.string().optional(),
  limits_memory_swap: z.string().optional(),
  limits_memory_swappiness: z.number().int().optional(),
  limits_memory_reservation: z.string().optional(),
  limits_cpus: z.string().optional(),
  limits_cpuset: z.string().optional(),
  limits_cpu_shares: z.number().int().optional(),
  instant_deploy: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "server_uuid": "serverUuid",
    "project_uuid": "projectUuid",
    "environment_name": "environmentName",
    "postgres_user": "postgresUser",
    "postgres_password": "postgresPassword",
    "postgres_db": "postgresDb",
    "postgres_initdb_args": "postgresInitdbArgs",
    "postgres_host_auth_method": "postgresHostAuthMethod",
    "postgres_conf": "postgresConf",
    "destination_uuid": "destinationUuid",
    "is_public": "isPublic",
    "public_port": "publicPort",
    "limits_memory": "limitsMemory",
    "limits_memory_swap": "limitsMemorySwap",
    "limits_memory_swappiness": "limitsMemorySwappiness",
    "limits_memory_reservation": "limitsMemoryReservation",
    "limits_cpus": "limitsCpus",
    "limits_cpuset": "limitsCpuset",
    "limits_cpu_shares": "limitsCpuShares",
    "instant_deploy": "instantDeploy",
  });
});

/** @internal */
export type CreateDatabasePostgresqlRequestBody$Outbound = {
  server_uuid: string;
  project_uuid: string;
  environment_name: string;
  postgres_user?: string | undefined;
  postgres_password?: string | undefined;
  postgres_db?: string | undefined;
  postgres_initdb_args?: string | undefined;
  postgres_host_auth_method?: string | undefined;
  postgres_conf?: string | undefined;
  destination_uuid?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  image?: string | undefined;
  is_public?: boolean | undefined;
  public_port?: number | undefined;
  limits_memory?: string | undefined;
  limits_memory_swap?: string | undefined;
  limits_memory_swappiness?: number | undefined;
  limits_memory_reservation?: string | undefined;
  limits_cpus?: string | undefined;
  limits_cpuset?: string | undefined;
  limits_cpu_shares?: number | undefined;
  instant_deploy?: boolean | undefined;
};

/** @internal */
export const CreateDatabasePostgresqlRequestBody$outboundSchema: z.ZodType<
  CreateDatabasePostgresqlRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDatabasePostgresqlRequestBody
> = z.object({
  serverUuid: z.string(),
  projectUuid: z.string(),
  environmentName: z.string(),
  postgresUser: z.string().optional(),
  postgresPassword: z.string().optional(),
  postgresDb: z.string().optional(),
  postgresInitdbArgs: z.string().optional(),
  postgresHostAuthMethod: z.string().optional(),
  postgresConf: z.string().optional(),
  destinationUuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  image: z.string().optional(),
  isPublic: z.boolean().optional(),
  publicPort: z.number().int().optional(),
  limitsMemory: z.string().optional(),
  limitsMemorySwap: z.string().optional(),
  limitsMemorySwappiness: z.number().int().optional(),
  limitsMemoryReservation: z.string().optional(),
  limitsCpus: z.string().optional(),
  limitsCpuset: z.string().optional(),
  limitsCpuShares: z.number().int().optional(),
  instantDeploy: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    serverUuid: "server_uuid",
    projectUuid: "project_uuid",
    environmentName: "environment_name",
    postgresUser: "postgres_user",
    postgresPassword: "postgres_password",
    postgresDb: "postgres_db",
    postgresInitdbArgs: "postgres_initdb_args",
    postgresHostAuthMethod: "postgres_host_auth_method",
    postgresConf: "postgres_conf",
    destinationUuid: "destination_uuid",
    isPublic: "is_public",
    publicPort: "public_port",
    limitsMemory: "limits_memory",
    limitsMemorySwap: "limits_memory_swap",
    limitsMemorySwappiness: "limits_memory_swappiness",
    limitsMemoryReservation: "limits_memory_reservation",
    limitsCpus: "limits_cpus",
    limitsCpuset: "limits_cpuset",
    limitsCpuShares: "limits_cpu_shares",
    instantDeploy: "instant_deploy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatabasePostgresqlRequestBody$ {
  /** @deprecated use `CreateDatabasePostgresqlRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateDatabasePostgresqlRequestBody$inboundSchema;
  /** @deprecated use `CreateDatabasePostgresqlRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatabasePostgresqlRequestBody$outboundSchema;
  /** @deprecated use `CreateDatabasePostgresqlRequestBody$Outbound` instead. */
  export type Outbound = CreateDatabasePostgresqlRequestBody$Outbound;
}

export function createDatabasePostgresqlRequestBodyToJSON(
  createDatabasePostgresqlRequestBody: CreateDatabasePostgresqlRequestBody,
): string {
  return JSON.stringify(
    CreateDatabasePostgresqlRequestBody$outboundSchema.parse(
      createDatabasePostgresqlRequestBody,
    ),
  );
}

export function createDatabasePostgresqlRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatabasePostgresqlRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDatabasePostgresqlRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatabasePostgresqlRequestBody' from JSON`,
  );
}
