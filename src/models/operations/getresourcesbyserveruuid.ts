/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetResourcesByServerUuidRequest = {
  /**
   * Server's UUID
   */
  uuid: string;
};

export type ResponseBody = {
  id?: number | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const GetResourcesByServerUuidRequest$inboundSchema: z.ZodType<
  GetResourcesByServerUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetResourcesByServerUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetResourcesByServerUuidRequest$outboundSchema: z.ZodType<
  GetResourcesByServerUuidRequest$Outbound,
  z.ZodTypeDef,
  GetResourcesByServerUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesByServerUuidRequest$ {
  /** @deprecated use `GetResourcesByServerUuidRequest$inboundSchema` instead. */
  export const inboundSchema = GetResourcesByServerUuidRequest$inboundSchema;
  /** @deprecated use `GetResourcesByServerUuidRequest$outboundSchema` instead. */
  export const outboundSchema = GetResourcesByServerUuidRequest$outboundSchema;
  /** @deprecated use `GetResourcesByServerUuidRequest$Outbound` instead. */
  export type Outbound = GetResourcesByServerUuidRequest$Outbound;
}

export function getResourcesByServerUuidRequestToJSON(
  getResourcesByServerUuidRequest: GetResourcesByServerUuidRequest,
): string {
  return JSON.stringify(
    GetResourcesByServerUuidRequest$outboundSchema.parse(
      getResourcesByServerUuidRequest,
    ),
  );
}

export function getResourcesByServerUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesByServerUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesByServerUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesByServerUuidRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
  status: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ResponseBody$Outbound = {
  id?: number | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  id: z.number().int().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  status: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
