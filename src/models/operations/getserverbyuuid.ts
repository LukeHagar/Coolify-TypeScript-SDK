/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetServerByUuidRequest = {
  /**
   * Server's UUID
   */
  uuid: string;
};

/** @internal */
export const GetServerByUuidRequest$inboundSchema: z.ZodType<
  GetServerByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type GetServerByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const GetServerByUuidRequest$outboundSchema: z.ZodType<
  GetServerByUuidRequest$Outbound,
  z.ZodTypeDef,
  GetServerByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServerByUuidRequest$ {
  /** @deprecated use `GetServerByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = GetServerByUuidRequest$inboundSchema;
  /** @deprecated use `GetServerByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = GetServerByUuidRequest$outboundSchema;
  /** @deprecated use `GetServerByUuidRequest$Outbound` instead. */
  export type Outbound = GetServerByUuidRequest$Outbound;
}

export function getServerByUuidRequestToJSON(
  getServerByUuidRequest: GetServerByUuidRequest,
): string {
  return JSON.stringify(
    GetServerByUuidRequest$outboundSchema.parse(getServerByUuidRequest),
  );
}

export function getServerByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetServerByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetServerByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetServerByUuidRequest' from JSON`,
  );
}
