/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteEnvByApplicationUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
  /**
   * UUID of the environment variable.
   */
  envUuid: string;
};

/**
 * Environment variable deleted.
 */
export type DeleteEnvByApplicationUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteEnvByApplicationUuidRequest$inboundSchema: z.ZodType<
  DeleteEnvByApplicationUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  env_uuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "env_uuid": "envUuid",
  });
});

/** @internal */
export type DeleteEnvByApplicationUuidRequest$Outbound = {
  uuid: string;
  env_uuid: string;
};

/** @internal */
export const DeleteEnvByApplicationUuidRequest$outboundSchema: z.ZodType<
  DeleteEnvByApplicationUuidRequest$Outbound,
  z.ZodTypeDef,
  DeleteEnvByApplicationUuidRequest
> = z.object({
  uuid: z.string(),
  envUuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    envUuid: "env_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvByApplicationUuidRequest$ {
  /** @deprecated use `DeleteEnvByApplicationUuidRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteEnvByApplicationUuidRequest$inboundSchema;
  /** @deprecated use `DeleteEnvByApplicationUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteEnvByApplicationUuidRequest$outboundSchema;
  /** @deprecated use `DeleteEnvByApplicationUuidRequest$Outbound` instead. */
  export type Outbound = DeleteEnvByApplicationUuidRequest$Outbound;
}

export function deleteEnvByApplicationUuidRequestToJSON(
  deleteEnvByApplicationUuidRequest: DeleteEnvByApplicationUuidRequest,
): string {
  return JSON.stringify(
    DeleteEnvByApplicationUuidRequest$outboundSchema.parse(
      deleteEnvByApplicationUuidRequest,
    ),
  );
}

export function deleteEnvByApplicationUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteEnvByApplicationUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteEnvByApplicationUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteEnvByApplicationUuidRequest' from JSON`,
  );
}

/** @internal */
export const DeleteEnvByApplicationUuidResponseBody$inboundSchema: z.ZodType<
  DeleteEnvByApplicationUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteEnvByApplicationUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteEnvByApplicationUuidResponseBody$outboundSchema: z.ZodType<
  DeleteEnvByApplicationUuidResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteEnvByApplicationUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvByApplicationUuidResponseBody$ {
  /** @deprecated use `DeleteEnvByApplicationUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteEnvByApplicationUuidResponseBody$inboundSchema;
  /** @deprecated use `DeleteEnvByApplicationUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteEnvByApplicationUuidResponseBody$outboundSchema;
  /** @deprecated use `DeleteEnvByApplicationUuidResponseBody$Outbound` instead. */
  export type Outbound = DeleteEnvByApplicationUuidResponseBody$Outbound;
}

export function deleteEnvByApplicationUuidResponseBodyToJSON(
  deleteEnvByApplicationUuidResponseBody:
    DeleteEnvByApplicationUuidResponseBody,
): string {
  return JSON.stringify(
    DeleteEnvByApplicationUuidResponseBody$outboundSchema.parse(
      deleteEnvByApplicationUuidResponseBody,
    ),
  );
}

export function deleteEnvByApplicationUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteEnvByApplicationUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteEnvByApplicationUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteEnvByApplicationUuidResponseBody' from JSON`,
  );
}
