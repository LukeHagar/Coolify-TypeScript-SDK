/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListEnvsByApplicationUuidRequest = {
  /**
   * UUID of the application.
   */
  uuid: string;
};

/** @internal */
export const ListEnvsByApplicationUuidRequest$inboundSchema: z.ZodType<
  ListEnvsByApplicationUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type ListEnvsByApplicationUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const ListEnvsByApplicationUuidRequest$outboundSchema: z.ZodType<
  ListEnvsByApplicationUuidRequest$Outbound,
  z.ZodTypeDef,
  ListEnvsByApplicationUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvsByApplicationUuidRequest$ {
  /** @deprecated use `ListEnvsByApplicationUuidRequest$inboundSchema` instead. */
  export const inboundSchema = ListEnvsByApplicationUuidRequest$inboundSchema;
  /** @deprecated use `ListEnvsByApplicationUuidRequest$outboundSchema` instead. */
  export const outboundSchema = ListEnvsByApplicationUuidRequest$outboundSchema;
  /** @deprecated use `ListEnvsByApplicationUuidRequest$Outbound` instead. */
  export type Outbound = ListEnvsByApplicationUuidRequest$Outbound;
}

export function listEnvsByApplicationUuidRequestToJSON(
  listEnvsByApplicationUuidRequest: ListEnvsByApplicationUuidRequest,
): string {
  return JSON.stringify(
    ListEnvsByApplicationUuidRequest$outboundSchema.parse(
      listEnvsByApplicationUuidRequest,
    ),
  );
}

export function listEnvsByApplicationUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEnvsByApplicationUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEnvsByApplicationUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEnvsByApplicationUuidRequest' from JSON`,
  );
}
