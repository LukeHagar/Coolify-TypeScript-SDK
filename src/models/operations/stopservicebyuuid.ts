/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StopServiceByUuidRequest = {
  /**
   * UUID of the service.
   */
  uuid: string;
};

/**
 * Stop service.
 */
export type StopServiceByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const StopServiceByUuidRequest$inboundSchema: z.ZodType<
  StopServiceByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type StopServiceByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const StopServiceByUuidRequest$outboundSchema: z.ZodType<
  StopServiceByUuidRequest$Outbound,
  z.ZodTypeDef,
  StopServiceByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopServiceByUuidRequest$ {
  /** @deprecated use `StopServiceByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = StopServiceByUuidRequest$inboundSchema;
  /** @deprecated use `StopServiceByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = StopServiceByUuidRequest$outboundSchema;
  /** @deprecated use `StopServiceByUuidRequest$Outbound` instead. */
  export type Outbound = StopServiceByUuidRequest$Outbound;
}

export function stopServiceByUuidRequestToJSON(
  stopServiceByUuidRequest: StopServiceByUuidRequest,
): string {
  return JSON.stringify(
    StopServiceByUuidRequest$outboundSchema.parse(stopServiceByUuidRequest),
  );
}

export function stopServiceByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<StopServiceByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopServiceByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopServiceByUuidRequest' from JSON`,
  );
}

/** @internal */
export const StopServiceByUuidResponseBody$inboundSchema: z.ZodType<
  StopServiceByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type StopServiceByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const StopServiceByUuidResponseBody$outboundSchema: z.ZodType<
  StopServiceByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  StopServiceByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopServiceByUuidResponseBody$ {
  /** @deprecated use `StopServiceByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = StopServiceByUuidResponseBody$inboundSchema;
  /** @deprecated use `StopServiceByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = StopServiceByUuidResponseBody$outboundSchema;
  /** @deprecated use `StopServiceByUuidResponseBody$Outbound` instead. */
  export type Outbound = StopServiceByUuidResponseBody$Outbound;
}

export function stopServiceByUuidResponseBodyToJSON(
  stopServiceByUuidResponseBody: StopServiceByUuidResponseBody,
): string {
  return JSON.stringify(
    StopServiceByUuidResponseBody$outboundSchema.parse(
      stopServiceByUuidResponseBody,
    ),
  );
}

export function stopServiceByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StopServiceByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopServiceByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopServiceByUuidResponseBody' from JSON`,
  );
}
