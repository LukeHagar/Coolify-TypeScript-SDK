/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Application object that needs to be created.
 */
export type CreateDockercomposeApplicationRequestBody = {
  /**
   * The project UUID.
   */
  projectUuid: string;
  /**
   * The server UUID.
   */
  serverUuid: string;
  /**
   * The environment name.
   */
  environmentName: string;
  /**
   * The Docker Compose raw content.
   */
  dockerComposeRaw: string;
  /**
   * The destination UUID if the server has more than one destinations.
   */
  destinationUuid?: string | undefined;
  /**
   * The application name.
   */
  name?: string | undefined;
  /**
   * The application description.
   */
  description?: string | undefined;
  /**
   * The flag to indicate if the application should be deployed instantly.
   */
  instantDeploy?: boolean | undefined;
  /**
   * Use build server.
   */
  useBuildServer?: boolean | null | undefined;
};

/** @internal */
export const CreateDockercomposeApplicationRequestBody$inboundSchema: z.ZodType<
  CreateDockercomposeApplicationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_uuid: z.string(),
  server_uuid: z.string(),
  environment_name: z.string(),
  docker_compose_raw: z.string(),
  destination_uuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  instant_deploy: z.boolean().optional(),
  use_build_server: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_uuid": "projectUuid",
    "server_uuid": "serverUuid",
    "environment_name": "environmentName",
    "docker_compose_raw": "dockerComposeRaw",
    "destination_uuid": "destinationUuid",
    "instant_deploy": "instantDeploy",
    "use_build_server": "useBuildServer",
  });
});

/** @internal */
export type CreateDockercomposeApplicationRequestBody$Outbound = {
  project_uuid: string;
  server_uuid: string;
  environment_name: string;
  docker_compose_raw: string;
  destination_uuid?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  instant_deploy?: boolean | undefined;
  use_build_server?: boolean | null | undefined;
};

/** @internal */
export const CreateDockercomposeApplicationRequestBody$outboundSchema:
  z.ZodType<
    CreateDockercomposeApplicationRequestBody$Outbound,
    z.ZodTypeDef,
    CreateDockercomposeApplicationRequestBody
  > = z.object({
    projectUuid: z.string(),
    serverUuid: z.string(),
    environmentName: z.string(),
    dockerComposeRaw: z.string(),
    destinationUuid: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    instantDeploy: z.boolean().optional(),
    useBuildServer: z.nullable(z.boolean()).optional(),
  }).transform((v) => {
    return remap$(v, {
      projectUuid: "project_uuid",
      serverUuid: "server_uuid",
      environmentName: "environment_name",
      dockerComposeRaw: "docker_compose_raw",
      destinationUuid: "destination_uuid",
      instantDeploy: "instant_deploy",
      useBuildServer: "use_build_server",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDockercomposeApplicationRequestBody$ {
  /** @deprecated use `CreateDockercomposeApplicationRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateDockercomposeApplicationRequestBody$inboundSchema;
  /** @deprecated use `CreateDockercomposeApplicationRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateDockercomposeApplicationRequestBody$outboundSchema;
  /** @deprecated use `CreateDockercomposeApplicationRequestBody$Outbound` instead. */
  export type Outbound = CreateDockercomposeApplicationRequestBody$Outbound;
}

export function createDockercomposeApplicationRequestBodyToJSON(
  createDockercomposeApplicationRequestBody:
    CreateDockercomposeApplicationRequestBody,
): string {
  return JSON.stringify(
    CreateDockercomposeApplicationRequestBody$outboundSchema.parse(
      createDockercomposeApplicationRequestBody,
    ),
  );
}

export function createDockercomposeApplicationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateDockercomposeApplicationRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDockercomposeApplicationRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateDockercomposeApplicationRequestBody' from JSON`,
  );
}
