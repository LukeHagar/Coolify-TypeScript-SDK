/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StartServiceByUuidRequest = {
  /**
   * UUID of the service.
   */
  uuid: string;
};

/**
 * Start service.
 */
export type StartServiceByUuidResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const StartServiceByUuidRequest$inboundSchema: z.ZodType<
  StartServiceByUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
});

/** @internal */
export type StartServiceByUuidRequest$Outbound = {
  uuid: string;
};

/** @internal */
export const StartServiceByUuidRequest$outboundSchema: z.ZodType<
  StartServiceByUuidRequest$Outbound,
  z.ZodTypeDef,
  StartServiceByUuidRequest
> = z.object({
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartServiceByUuidRequest$ {
  /** @deprecated use `StartServiceByUuidRequest$inboundSchema` instead. */
  export const inboundSchema = StartServiceByUuidRequest$inboundSchema;
  /** @deprecated use `StartServiceByUuidRequest$outboundSchema` instead. */
  export const outboundSchema = StartServiceByUuidRequest$outboundSchema;
  /** @deprecated use `StartServiceByUuidRequest$Outbound` instead. */
  export type Outbound = StartServiceByUuidRequest$Outbound;
}

export function startServiceByUuidRequestToJSON(
  startServiceByUuidRequest: StartServiceByUuidRequest,
): string {
  return JSON.stringify(
    StartServiceByUuidRequest$outboundSchema.parse(startServiceByUuidRequest),
  );
}

export function startServiceByUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartServiceByUuidRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartServiceByUuidRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartServiceByUuidRequest' from JSON`,
  );
}

/** @internal */
export const StartServiceByUuidResponseBody$inboundSchema: z.ZodType<
  StartServiceByUuidResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type StartServiceByUuidResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const StartServiceByUuidResponseBody$outboundSchema: z.ZodType<
  StartServiceByUuidResponseBody$Outbound,
  z.ZodTypeDef,
  StartServiceByUuidResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartServiceByUuidResponseBody$ {
  /** @deprecated use `StartServiceByUuidResponseBody$inboundSchema` instead. */
  export const inboundSchema = StartServiceByUuidResponseBody$inboundSchema;
  /** @deprecated use `StartServiceByUuidResponseBody$outboundSchema` instead. */
  export const outboundSchema = StartServiceByUuidResponseBody$outboundSchema;
  /** @deprecated use `StartServiceByUuidResponseBody$Outbound` instead. */
  export type Outbound = StartServiceByUuidResponseBody$Outbound;
}

export function startServiceByUuidResponseBodyToJSON(
  startServiceByUuidResponseBody: StartServiceByUuidResponseBody,
): string {
  return JSON.stringify(
    StartServiceByUuidResponseBody$outboundSchema.parse(
      startServiceByUuidResponseBody,
    ),
  );
}

export function startServiceByUuidResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StartServiceByUuidResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartServiceByUuidResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartServiceByUuidResponseBody' from JSON`,
  );
}
