/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Resource not found.
 */
export type NotFoundData = {
  message?: string | undefined;
};

/**
 * Resource not found.
 */
export class NotFound extends Error {
  /** The original data that was passed to this error instance. */
  data$: NotFoundData;

  constructor(err: NotFoundData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "NotFound";
  }
}

/** @internal */
export const NotFound$inboundSchema: z.ZodType<
  NotFound,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
})
  .transform((v) => {
    return new NotFound(v);
  });

/** @internal */
export type NotFound$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const NotFound$outboundSchema: z.ZodType<
  NotFound$Outbound,
  z.ZodTypeDef,
  NotFound
> = z.instanceof(NotFound)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFound$ {
  /** @deprecated use `NotFound$inboundSchema` instead. */
  export const inboundSchema = NotFound$inboundSchema;
  /** @deprecated use `NotFound$outboundSchema` instead. */
  export const outboundSchema = NotFound$outboundSchema;
  /** @deprecated use `NotFound$Outbound` instead. */
  export type Outbound = NotFound$Outbound;
}
