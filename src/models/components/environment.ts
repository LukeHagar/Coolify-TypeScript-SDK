/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Environment model
 */
export type Environment = {
  id?: number | undefined;
  name?: string | undefined;
  projectId?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const Environment$inboundSchema: z.ZodType<
  Environment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  project_id: z.number().int().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
  description: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Environment$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  project_id?: number | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const Environment$outboundSchema: z.ZodType<
  Environment$Outbound,
  z.ZodTypeDef,
  Environment
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  projectId: z.number().int().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  description: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Environment$ {
  /** @deprecated use `Environment$inboundSchema` instead. */
  export const inboundSchema = Environment$inboundSchema;
  /** @deprecated use `Environment$outboundSchema` instead. */
  export const outboundSchema = Environment$outboundSchema;
  /** @deprecated use `Environment$Outbound` instead. */
  export type Outbound = Environment$Outbound;
}

export function environmentToJSON(environment: Environment): string {
  return JSON.stringify(Environment$outboundSchema.parse(environment));
}

export function environmentFromJSON(
  jsonString: string,
): SafeParseResult<Environment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Environment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Environment' from JSON`,
  );
}
