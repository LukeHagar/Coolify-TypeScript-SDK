/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";

/**
 * Team model
 */
export type Team = {
  /**
   * The unique identifier of the team.
   */
  id?: number | undefined;
  /**
   * The name of the team.
   */
  name?: string | undefined;
  /**
   * The description of the team.
   */
  description?: string | undefined;
  /**
   * Whether the team is personal or not.
   */
  personalTeam?: boolean | undefined;
  /**
   * The date and time the team was created.
   */
  createdAt?: string | undefined;
  /**
   * The date and time the team was last updated.
   */
  updatedAt?: string | undefined;
  /**
   * Whether SMTP is enabled or not.
   */
  smtpEnabled?: boolean | undefined;
  /**
   * The email address to send emails from.
   */
  smtpFromAddress?: string | undefined;
  /**
   * The name to send emails from.
   */
  smtpFromName?: string | undefined;
  /**
   * The email addresses to send emails to.
   */
  smtpRecipients?: string | undefined;
  /**
   * The SMTP host.
   */
  smtpHost?: string | undefined;
  /**
   * The SMTP port.
   */
  smtpPort?: string | undefined;
  /**
   * The SMTP encryption.
   */
  smtpEncryption?: string | undefined;
  /**
   * The SMTP username.
   */
  smtpUsername?: string | undefined;
  /**
   * The SMTP password.
   */
  smtpPassword?: string | undefined;
  /**
   * The SMTP timeout.
   */
  smtpTimeout?: string | undefined;
  /**
   * Whether to send test notifications via SMTP.
   */
  smtpNotificationsTest?: boolean | undefined;
  /**
   * Whether to send deployment notifications via SMTP.
   */
  smtpNotificationsDeployments?: boolean | undefined;
  /**
   * Whether to send status change notifications via SMTP.
   */
  smtpNotificationsStatusChanges?: boolean | undefined;
  /**
   * Whether to send scheduled task notifications via SMTP.
   */
  smtpNotificationsScheduledTasks?: boolean | undefined;
  /**
   * Whether to send database backup notifications via SMTP.
   */
  smtpNotificationsDatabaseBackups?: boolean | undefined;
  /**
   * Whether to send server disk usage notifications via SMTP.
   */
  smtpNotificationsServerDiskUsage?: boolean | undefined;
  /**
   * Whether Discord is enabled or not.
   */
  discordEnabled?: boolean | undefined;
  /**
   * The Discord webhook URL.
   */
  discordWebhookUrl?: string | undefined;
  /**
   * Whether to send test notifications via Discord.
   */
  discordNotificationsTest?: boolean | undefined;
  /**
   * Whether to send deployment notifications via Discord.
   */
  discordNotificationsDeployments?: boolean | undefined;
  /**
   * Whether to send status change notifications via Discord.
   */
  discordNotificationsStatusChanges?: boolean | undefined;
  /**
   * Whether to send database backup notifications via Discord.
   */
  discordNotificationsDatabaseBackups?: boolean | undefined;
  /**
   * Whether to send scheduled task notifications via Discord.
   */
  discordNotificationsScheduledTasks?: boolean | undefined;
  /**
   * Whether to send server disk usage notifications via Discord.
   */
  discordNotificationsServerDiskUsage?: boolean | undefined;
  /**
   * Whether to show the boarding screen or not.
   */
  showBoarding?: boolean | undefined;
  /**
   * Whether to enable resending or not.
   */
  resendEnabled?: boolean | undefined;
  /**
   * The resending API key.
   */
  resendApiKey?: string | undefined;
  /**
   * Whether to use instance email settings or not.
   */
  useInstanceEmailSettings?: boolean | undefined;
  /**
   * Whether Telegram is enabled or not.
   */
  telegramEnabled?: boolean | undefined;
  /**
   * The Telegram token.
   */
  telegramToken?: string | undefined;
  /**
   * The Telegram chat ID.
   */
  telegramChatId?: string | undefined;
  /**
   * Whether to send test notifications via Telegram.
   */
  telegramNotificationsTest?: boolean | undefined;
  /**
   * Whether to send deployment notifications via Telegram.
   */
  telegramNotificationsDeployments?: boolean | undefined;
  /**
   * Whether to send status change notifications via Telegram.
   */
  telegramNotificationsStatusChanges?: boolean | undefined;
  /**
   * Whether to send database backup notifications via Telegram.
   */
  telegramNotificationsDatabaseBackups?: boolean | undefined;
  /**
   * The Telegram test message thread ID.
   */
  telegramNotificationsTestMessageThreadId?: string | undefined;
  /**
   * The Telegram deployment message thread ID.
   */
  telegramNotificationsDeploymentsMessageThreadId?: string | undefined;
  /**
   * The Telegram status change message thread ID.
   */
  telegramNotificationsStatusChangesMessageThreadId?: string | undefined;
  /**
   * The Telegram database backup message thread ID.
   */
  telegramNotificationsDatabaseBackupsMessageThreadId?: string | undefined;
  /**
   * The custom server limit.
   */
  customServerLimit?: string | undefined;
  /**
   * Whether to send scheduled task notifications via Telegram.
   */
  telegramNotificationsScheduledTasks?: boolean | undefined;
  /**
   * The Telegram scheduled task message thread ID.
   */
  telegramNotificationsScheduledTasksThreadId?: string | undefined;
  /**
   * The members of the team.
   */
  members?: Array<User> | undefined;
};

/** @internal */
export const Team$inboundSchema: z.ZodType<Team, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number().int().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    personal_team: z.boolean().optional(),
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
    smtp_enabled: z.boolean().optional(),
    smtp_from_address: z.string().optional(),
    smtp_from_name: z.string().optional(),
    smtp_recipients: z.string().optional(),
    smtp_host: z.string().optional(),
    smtp_port: z.string().optional(),
    smtp_encryption: z.string().optional(),
    smtp_username: z.string().optional(),
    smtp_password: z.string().optional(),
    smtp_timeout: z.string().optional(),
    smtp_notifications_test: z.boolean().optional(),
    smtp_notifications_deployments: z.boolean().optional(),
    smtp_notifications_status_changes: z.boolean().optional(),
    smtp_notifications_scheduled_tasks: z.boolean().optional(),
    smtp_notifications_database_backups: z.boolean().optional(),
    smtp_notifications_server_disk_usage: z.boolean().optional(),
    discord_enabled: z.boolean().optional(),
    discord_webhook_url: z.string().optional(),
    discord_notifications_test: z.boolean().optional(),
    discord_notifications_deployments: z.boolean().optional(),
    discord_notifications_status_changes: z.boolean().optional(),
    discord_notifications_database_backups: z.boolean().optional(),
    discord_notifications_scheduled_tasks: z.boolean().optional(),
    discord_notifications_server_disk_usage: z.boolean().optional(),
    show_boarding: z.boolean().optional(),
    resend_enabled: z.boolean().optional(),
    resend_api_key: z.string().optional(),
    use_instance_email_settings: z.boolean().optional(),
    telegram_enabled: z.boolean().optional(),
    telegram_token: z.string().optional(),
    telegram_chat_id: z.string().optional(),
    telegram_notifications_test: z.boolean().optional(),
    telegram_notifications_deployments: z.boolean().optional(),
    telegram_notifications_status_changes: z.boolean().optional(),
    telegram_notifications_database_backups: z.boolean().optional(),
    telegram_notifications_test_message_thread_id: z.string().optional(),
    telegram_notifications_deployments_message_thread_id: z.string().optional(),
    telegram_notifications_status_changes_message_thread_id: z.string()
      .optional(),
    telegram_notifications_database_backups_message_thread_id: z.string()
      .optional(),
    custom_server_limit: z.string().optional(),
    telegram_notifications_scheduled_tasks: z.boolean().optional(),
    telegram_notifications_scheduled_tasks_thread_id: z.string().optional(),
    members: z.array(User$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "personal_team": "personalTeam",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "smtp_enabled": "smtpEnabled",
      "smtp_from_address": "smtpFromAddress",
      "smtp_from_name": "smtpFromName",
      "smtp_recipients": "smtpRecipients",
      "smtp_host": "smtpHost",
      "smtp_port": "smtpPort",
      "smtp_encryption": "smtpEncryption",
      "smtp_username": "smtpUsername",
      "smtp_password": "smtpPassword",
      "smtp_timeout": "smtpTimeout",
      "smtp_notifications_test": "smtpNotificationsTest",
      "smtp_notifications_deployments": "smtpNotificationsDeployments",
      "smtp_notifications_status_changes": "smtpNotificationsStatusChanges",
      "smtp_notifications_scheduled_tasks": "smtpNotificationsScheduledTasks",
      "smtp_notifications_database_backups": "smtpNotificationsDatabaseBackups",
      "smtp_notifications_server_disk_usage":
        "smtpNotificationsServerDiskUsage",
      "discord_enabled": "discordEnabled",
      "discord_webhook_url": "discordWebhookUrl",
      "discord_notifications_test": "discordNotificationsTest",
      "discord_notifications_deployments": "discordNotificationsDeployments",
      "discord_notifications_status_changes":
        "discordNotificationsStatusChanges",
      "discord_notifications_database_backups":
        "discordNotificationsDatabaseBackups",
      "discord_notifications_scheduled_tasks":
        "discordNotificationsScheduledTasks",
      "discord_notifications_server_disk_usage":
        "discordNotificationsServerDiskUsage",
      "show_boarding": "showBoarding",
      "resend_enabled": "resendEnabled",
      "resend_api_key": "resendApiKey",
      "use_instance_email_settings": "useInstanceEmailSettings",
      "telegram_enabled": "telegramEnabled",
      "telegram_token": "telegramToken",
      "telegram_chat_id": "telegramChatId",
      "telegram_notifications_test": "telegramNotificationsTest",
      "telegram_notifications_deployments": "telegramNotificationsDeployments",
      "telegram_notifications_status_changes":
        "telegramNotificationsStatusChanges",
      "telegram_notifications_database_backups":
        "telegramNotificationsDatabaseBackups",
      "telegram_notifications_test_message_thread_id":
        "telegramNotificationsTestMessageThreadId",
      "telegram_notifications_deployments_message_thread_id":
        "telegramNotificationsDeploymentsMessageThreadId",
      "telegram_notifications_status_changes_message_thread_id":
        "telegramNotificationsStatusChangesMessageThreadId",
      "telegram_notifications_database_backups_message_thread_id":
        "telegramNotificationsDatabaseBackupsMessageThreadId",
      "custom_server_limit": "customServerLimit",
      "telegram_notifications_scheduled_tasks":
        "telegramNotificationsScheduledTasks",
      "telegram_notifications_scheduled_tasks_thread_id":
        "telegramNotificationsScheduledTasksThreadId",
    });
  });

/** @internal */
export type Team$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  description?: string | undefined;
  personal_team?: boolean | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  smtp_enabled?: boolean | undefined;
  smtp_from_address?: string | undefined;
  smtp_from_name?: string | undefined;
  smtp_recipients?: string | undefined;
  smtp_host?: string | undefined;
  smtp_port?: string | undefined;
  smtp_encryption?: string | undefined;
  smtp_username?: string | undefined;
  smtp_password?: string | undefined;
  smtp_timeout?: string | undefined;
  smtp_notifications_test?: boolean | undefined;
  smtp_notifications_deployments?: boolean | undefined;
  smtp_notifications_status_changes?: boolean | undefined;
  smtp_notifications_scheduled_tasks?: boolean | undefined;
  smtp_notifications_database_backups?: boolean | undefined;
  smtp_notifications_server_disk_usage?: boolean | undefined;
  discord_enabled?: boolean | undefined;
  discord_webhook_url?: string | undefined;
  discord_notifications_test?: boolean | undefined;
  discord_notifications_deployments?: boolean | undefined;
  discord_notifications_status_changes?: boolean | undefined;
  discord_notifications_database_backups?: boolean | undefined;
  discord_notifications_scheduled_tasks?: boolean | undefined;
  discord_notifications_server_disk_usage?: boolean | undefined;
  show_boarding?: boolean | undefined;
  resend_enabled?: boolean | undefined;
  resend_api_key?: string | undefined;
  use_instance_email_settings?: boolean | undefined;
  telegram_enabled?: boolean | undefined;
  telegram_token?: string | undefined;
  telegram_chat_id?: string | undefined;
  telegram_notifications_test?: boolean | undefined;
  telegram_notifications_deployments?: boolean | undefined;
  telegram_notifications_status_changes?: boolean | undefined;
  telegram_notifications_database_backups?: boolean | undefined;
  telegram_notifications_test_message_thread_id?: string | undefined;
  telegram_notifications_deployments_message_thread_id?: string | undefined;
  telegram_notifications_status_changes_message_thread_id?: string | undefined;
  telegram_notifications_database_backups_message_thread_id?:
    | string
    | undefined;
  custom_server_limit?: string | undefined;
  telegram_notifications_scheduled_tasks?: boolean | undefined;
  telegram_notifications_scheduled_tasks_thread_id?: string | undefined;
  members?: Array<User$Outbound> | undefined;
};

/** @internal */
export const Team$outboundSchema: z.ZodType<Team$Outbound, z.ZodTypeDef, Team> =
  z.object({
    id: z.number().int().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    personalTeam: z.boolean().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    smtpEnabled: z.boolean().optional(),
    smtpFromAddress: z.string().optional(),
    smtpFromName: z.string().optional(),
    smtpRecipients: z.string().optional(),
    smtpHost: z.string().optional(),
    smtpPort: z.string().optional(),
    smtpEncryption: z.string().optional(),
    smtpUsername: z.string().optional(),
    smtpPassword: z.string().optional(),
    smtpTimeout: z.string().optional(),
    smtpNotificationsTest: z.boolean().optional(),
    smtpNotificationsDeployments: z.boolean().optional(),
    smtpNotificationsStatusChanges: z.boolean().optional(),
    smtpNotificationsScheduledTasks: z.boolean().optional(),
    smtpNotificationsDatabaseBackups: z.boolean().optional(),
    smtpNotificationsServerDiskUsage: z.boolean().optional(),
    discordEnabled: z.boolean().optional(),
    discordWebhookUrl: z.string().optional(),
    discordNotificationsTest: z.boolean().optional(),
    discordNotificationsDeployments: z.boolean().optional(),
    discordNotificationsStatusChanges: z.boolean().optional(),
    discordNotificationsDatabaseBackups: z.boolean().optional(),
    discordNotificationsScheduledTasks: z.boolean().optional(),
    discordNotificationsServerDiskUsage: z.boolean().optional(),
    showBoarding: z.boolean().optional(),
    resendEnabled: z.boolean().optional(),
    resendApiKey: z.string().optional(),
    useInstanceEmailSettings: z.boolean().optional(),
    telegramEnabled: z.boolean().optional(),
    telegramToken: z.string().optional(),
    telegramChatId: z.string().optional(),
    telegramNotificationsTest: z.boolean().optional(),
    telegramNotificationsDeployments: z.boolean().optional(),
    telegramNotificationsStatusChanges: z.boolean().optional(),
    telegramNotificationsDatabaseBackups: z.boolean().optional(),
    telegramNotificationsTestMessageThreadId: z.string().optional(),
    telegramNotificationsDeploymentsMessageThreadId: z.string().optional(),
    telegramNotificationsStatusChangesMessageThreadId: z.string().optional(),
    telegramNotificationsDatabaseBackupsMessageThreadId: z.string().optional(),
    customServerLimit: z.string().optional(),
    telegramNotificationsScheduledTasks: z.boolean().optional(),
    telegramNotificationsScheduledTasksThreadId: z.string().optional(),
    members: z.array(User$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      personalTeam: "personal_team",
      createdAt: "created_at",
      updatedAt: "updated_at",
      smtpEnabled: "smtp_enabled",
      smtpFromAddress: "smtp_from_address",
      smtpFromName: "smtp_from_name",
      smtpRecipients: "smtp_recipients",
      smtpHost: "smtp_host",
      smtpPort: "smtp_port",
      smtpEncryption: "smtp_encryption",
      smtpUsername: "smtp_username",
      smtpPassword: "smtp_password",
      smtpTimeout: "smtp_timeout",
      smtpNotificationsTest: "smtp_notifications_test",
      smtpNotificationsDeployments: "smtp_notifications_deployments",
      smtpNotificationsStatusChanges: "smtp_notifications_status_changes",
      smtpNotificationsScheduledTasks: "smtp_notifications_scheduled_tasks",
      smtpNotificationsDatabaseBackups: "smtp_notifications_database_backups",
      smtpNotificationsServerDiskUsage: "smtp_notifications_server_disk_usage",
      discordEnabled: "discord_enabled",
      discordWebhookUrl: "discord_webhook_url",
      discordNotificationsTest: "discord_notifications_test",
      discordNotificationsDeployments: "discord_notifications_deployments",
      discordNotificationsStatusChanges: "discord_notifications_status_changes",
      discordNotificationsDatabaseBackups:
        "discord_notifications_database_backups",
      discordNotificationsScheduledTasks:
        "discord_notifications_scheduled_tasks",
      discordNotificationsServerDiskUsage:
        "discord_notifications_server_disk_usage",
      showBoarding: "show_boarding",
      resendEnabled: "resend_enabled",
      resendApiKey: "resend_api_key",
      useInstanceEmailSettings: "use_instance_email_settings",
      telegramEnabled: "telegram_enabled",
      telegramToken: "telegram_token",
      telegramChatId: "telegram_chat_id",
      telegramNotificationsTest: "telegram_notifications_test",
      telegramNotificationsDeployments: "telegram_notifications_deployments",
      telegramNotificationsStatusChanges:
        "telegram_notifications_status_changes",
      telegramNotificationsDatabaseBackups:
        "telegram_notifications_database_backups",
      telegramNotificationsTestMessageThreadId:
        "telegram_notifications_test_message_thread_id",
      telegramNotificationsDeploymentsMessageThreadId:
        "telegram_notifications_deployments_message_thread_id",
      telegramNotificationsStatusChangesMessageThreadId:
        "telegram_notifications_status_changes_message_thread_id",
      telegramNotificationsDatabaseBackupsMessageThreadId:
        "telegram_notifications_database_backups_message_thread_id",
      customServerLimit: "custom_server_limit",
      telegramNotificationsScheduledTasks:
        "telegram_notifications_scheduled_tasks",
      telegramNotificationsScheduledTasksThreadId:
        "telegram_notifications_scheduled_tasks_thread_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Team$ {
  /** @deprecated use `Team$inboundSchema` instead. */
  export const inboundSchema = Team$inboundSchema;
  /** @deprecated use `Team$outboundSchema` instead. */
  export const outboundSchema = Team$outboundSchema;
  /** @deprecated use `Team$Outbound` instead. */
  export type Outbound = Team$Outbound;
}

export function teamToJSON(team: Team): string {
  return JSON.stringify(Team$outboundSchema.parse(team));
}

export function teamFromJSON(
  jsonString: string,
): SafeParseResult<Team, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Team$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Team' from JSON`,
  );
}
