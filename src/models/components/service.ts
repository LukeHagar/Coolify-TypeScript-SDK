/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Service model
 */
export type Service = {
  /**
   * The unique identifier of the service. Only used for database identification.
   */
  id?: number | undefined;
  /**
   * The unique identifier of the service.
   */
  uuid?: string | undefined;
  /**
   * The name of the service.
   */
  name?: string | undefined;
  /**
   * The unique identifier of the environment where the service is attached to.
   */
  environmentId?: number | undefined;
  /**
   * The unique identifier of the server where the service is running.
   */
  serverId?: number | undefined;
  /**
   * The description of the service.
   */
  description?: string | undefined;
  /**
   * The raw docker-compose.yml file of the service.
   */
  dockerComposeRaw?: string | undefined;
  /**
   * The docker-compose.yml file that is parsed and modified by Coolify.
   */
  dockerCompose?: string | undefined;
  /**
   * Destination type.
   */
  destinationType?: string | undefined;
  /**
   * The unique identifier of the destination where the service is running.
   */
  destinationId?: number | undefined;
  /**
   * The flag to connect the service to the predefined Docker network.
   */
  connectToDockerNetwork?: boolean | undefined;
  /**
   * The flag to enable the container label escape.
   */
  isContainerLabelEscapeEnabled?: boolean | undefined;
  /**
   * The flag to enable the container label readonly.
   */
  isContainerLabelReadonlyEnabled?: boolean | undefined;
  /**
   * The hash of the service configuration.
   */
  configHash?: string | undefined;
  /**
   * The type of the service.
   */
  serviceType?: string | undefined;
  /**
   * The date and time when the service was created.
   */
  createdAt?: string | undefined;
  /**
   * The date and time when the service was last updated.
   */
  updatedAt?: string | undefined;
  /**
   * The date and time when the service was deleted.
   */
  deletedAt?: string | undefined;
};

/** @internal */
export const Service$inboundSchema: z.ZodType<Service, z.ZodTypeDef, unknown> =
  z.object({
    id: z.number().int().optional(),
    uuid: z.string().optional(),
    name: z.string().optional(),
    environment_id: z.number().int().optional(),
    server_id: z.number().int().optional(),
    description: z.string().optional(),
    docker_compose_raw: z.string().optional(),
    docker_compose: z.string().optional(),
    destination_type: z.string().optional(),
    destination_id: z.number().int().optional(),
    connect_to_docker_network: z.boolean().optional(),
    is_container_label_escape_enabled: z.boolean().optional(),
    is_container_label_readonly_enabled: z.boolean().optional(),
    config_hash: z.string().optional(),
    service_type: z.string().optional(),
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
    deleted_at: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "environment_id": "environmentId",
      "server_id": "serverId",
      "docker_compose_raw": "dockerComposeRaw",
      "docker_compose": "dockerCompose",
      "destination_type": "destinationType",
      "destination_id": "destinationId",
      "connect_to_docker_network": "connectToDockerNetwork",
      "is_container_label_escape_enabled": "isContainerLabelEscapeEnabled",
      "is_container_label_readonly_enabled": "isContainerLabelReadonlyEnabled",
      "config_hash": "configHash",
      "service_type": "serviceType",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "deleted_at": "deletedAt",
    });
  });

/** @internal */
export type Service$Outbound = {
  id?: number | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  environment_id?: number | undefined;
  server_id?: number | undefined;
  description?: string | undefined;
  docker_compose_raw?: string | undefined;
  docker_compose?: string | undefined;
  destination_type?: string | undefined;
  destination_id?: number | undefined;
  connect_to_docker_network?: boolean | undefined;
  is_container_label_escape_enabled?: boolean | undefined;
  is_container_label_readonly_enabled?: boolean | undefined;
  config_hash?: string | undefined;
  service_type?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  deleted_at?: string | undefined;
};

/** @internal */
export const Service$outboundSchema: z.ZodType<
  Service$Outbound,
  z.ZodTypeDef,
  Service
> = z.object({
  id: z.number().int().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  environmentId: z.number().int().optional(),
  serverId: z.number().int().optional(),
  description: z.string().optional(),
  dockerComposeRaw: z.string().optional(),
  dockerCompose: z.string().optional(),
  destinationType: z.string().optional(),
  destinationId: z.number().int().optional(),
  connectToDockerNetwork: z.boolean().optional(),
  isContainerLabelEscapeEnabled: z.boolean().optional(),
  isContainerLabelReadonlyEnabled: z.boolean().optional(),
  configHash: z.string().optional(),
  serviceType: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  deletedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    environmentId: "environment_id",
    serverId: "server_id",
    dockerComposeRaw: "docker_compose_raw",
    dockerCompose: "docker_compose",
    destinationType: "destination_type",
    destinationId: "destination_id",
    connectToDockerNetwork: "connect_to_docker_network",
    isContainerLabelEscapeEnabled: "is_container_label_escape_enabled",
    isContainerLabelReadonlyEnabled: "is_container_label_readonly_enabled",
    configHash: "config_hash",
    serviceType: "service_type",
    createdAt: "created_at",
    updatedAt: "updated_at",
    deletedAt: "deleted_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Service$ {
  /** @deprecated use `Service$inboundSchema` instead. */
  export const inboundSchema = Service$inboundSchema;
  /** @deprecated use `Service$outboundSchema` instead. */
  export const outboundSchema = Service$outboundSchema;
  /** @deprecated use `Service$Outbound` instead. */
  export type Outbound = Service$Outbound;
}

export function serviceToJSON(service: Service): string {
  return JSON.stringify(Service$outboundSchema.parse(service));
}

export function serviceFromJSON(
  jsonString: string,
): SafeParseResult<Service, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Service$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Service' from JSON`,
  );
}
