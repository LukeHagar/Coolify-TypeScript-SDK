/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Environment Variable model
 */
export type EnvironmentVariable = {
  id?: number | undefined;
  uuid?: string | undefined;
  applicationId?: number | undefined;
  serviceId?: number | undefined;
  databaseId?: number | undefined;
  isBuildTime?: boolean | undefined;
  isLiteral?: boolean | undefined;
  isMultiline?: boolean | undefined;
  isPreview?: boolean | undefined;
  isShared?: boolean | undefined;
  isShownOnce?: boolean | undefined;
  key?: string | undefined;
  value?: string | undefined;
  realValue?: string | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const EnvironmentVariable$inboundSchema: z.ZodType<
  EnvironmentVariable,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  uuid: z.string().optional(),
  application_id: z.number().int().optional(),
  service_id: z.number().int().optional(),
  database_id: z.number().int().optional(),
  is_build_time: z.boolean().optional(),
  is_literal: z.boolean().optional(),
  is_multiline: z.boolean().optional(),
  is_preview: z.boolean().optional(),
  is_shared: z.boolean().optional(),
  is_shown_once: z.boolean().optional(),
  key: z.string().optional(),
  value: z.string().optional(),
  real_value: z.string().optional(),
  version: z.string().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "service_id": "serviceId",
    "database_id": "databaseId",
    "is_build_time": "isBuildTime",
    "is_literal": "isLiteral",
    "is_multiline": "isMultiline",
    "is_preview": "isPreview",
    "is_shared": "isShared",
    "is_shown_once": "isShownOnce",
    "real_value": "realValue",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type EnvironmentVariable$Outbound = {
  id?: number | undefined;
  uuid?: string | undefined;
  application_id?: number | undefined;
  service_id?: number | undefined;
  database_id?: number | undefined;
  is_build_time?: boolean | undefined;
  is_literal?: boolean | undefined;
  is_multiline?: boolean | undefined;
  is_preview?: boolean | undefined;
  is_shared?: boolean | undefined;
  is_shown_once?: boolean | undefined;
  key?: string | undefined;
  value?: string | undefined;
  real_value?: string | undefined;
  version?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const EnvironmentVariable$outboundSchema: z.ZodType<
  EnvironmentVariable$Outbound,
  z.ZodTypeDef,
  EnvironmentVariable
> = z.object({
  id: z.number().int().optional(),
  uuid: z.string().optional(),
  applicationId: z.number().int().optional(),
  serviceId: z.number().int().optional(),
  databaseId: z.number().int().optional(),
  isBuildTime: z.boolean().optional(),
  isLiteral: z.boolean().optional(),
  isMultiline: z.boolean().optional(),
  isPreview: z.boolean().optional(),
  isShared: z.boolean().optional(),
  isShownOnce: z.boolean().optional(),
  key: z.string().optional(),
  value: z.string().optional(),
  realValue: z.string().optional(),
  version: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    serviceId: "service_id",
    databaseId: "database_id",
    isBuildTime: "is_build_time",
    isLiteral: "is_literal",
    isMultiline: "is_multiline",
    isPreview: "is_preview",
    isShared: "is_shared",
    isShownOnce: "is_shown_once",
    realValue: "real_value",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentVariable$ {
  /** @deprecated use `EnvironmentVariable$inboundSchema` instead. */
  export const inboundSchema = EnvironmentVariable$inboundSchema;
  /** @deprecated use `EnvironmentVariable$outboundSchema` instead. */
  export const outboundSchema = EnvironmentVariable$outboundSchema;
  /** @deprecated use `EnvironmentVariable$Outbound` instead. */
  export type Outbound = EnvironmentVariable$Outbound;
}

export function environmentVariableToJSON(
  environmentVariable: EnvironmentVariable,
): string {
  return JSON.stringify(
    EnvironmentVariable$outboundSchema.parse(environmentVariable),
  );
}

export function environmentVariableFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentVariable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentVariable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentVariable' from JSON`,
  );
}
