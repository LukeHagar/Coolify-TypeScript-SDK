/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * User model
 */
export type User = {
  /**
   * The user identifier in the database.
   */
  id?: number | undefined;
  /**
   * The user name.
   */
  name?: string | undefined;
  /**
   * The user email.
   */
  email?: string | undefined;
  /**
   * The date when the user email was verified.
   */
  emailVerifiedAt?: string | undefined;
  /**
   * The date when the user was created.
   */
  createdAt?: string | undefined;
  /**
   * The date when the user was updated.
   */
  updatedAt?: string | undefined;
  /**
   * The date when the user two factor was confirmed.
   */
  twoFactorConfirmedAt?: string | undefined;
  /**
   * The flag to force the user to reset the password.
   */
  forcePasswordReset?: boolean | undefined;
  /**
   * The flag to receive marketing emails.
   */
  marketingEmails?: boolean | undefined;
};

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number().int().optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    email_verified_at: z.string().optional(),
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
    two_factor_confirmed_at: z.string().optional(),
    force_password_reset: z.boolean().optional(),
    marketing_emails: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "email_verified_at": "emailVerifiedAt",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "two_factor_confirmed_at": "twoFactorConfirmedAt",
      "force_password_reset": "forcePasswordReset",
      "marketing_emails": "marketingEmails",
    });
  });

/** @internal */
export type User$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  email?: string | undefined;
  email_verified_at?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  two_factor_confirmed_at?: string | undefined;
  force_password_reset?: boolean | undefined;
  marketing_emails?: boolean | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    id: z.number().int().optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    emailVerifiedAt: z.string().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    twoFactorConfirmedAt: z.string().optional(),
    forcePasswordReset: z.boolean().optional(),
    marketingEmails: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      emailVerifiedAt: "email_verified_at",
      createdAt: "created_at",
      updatedAt: "updated_at",
      twoFactorConfirmedAt: "two_factor_confirmed_at",
      forcePasswordReset: "force_password_reset",
      marketingEmails: "marketing_emails",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}
