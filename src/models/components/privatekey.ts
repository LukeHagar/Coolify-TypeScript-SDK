/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Private Key model
 */
export type PrivateKey = {
  id?: number | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  privateKey?: string | undefined;
  isGitRelated?: boolean | undefined;
  teamId?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PrivateKey$inboundSchema: z.ZodType<
  PrivateKey,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  private_key: z.string().optional(),
  is_git_related: z.boolean().optional(),
  team_id: z.number().int().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "private_key": "privateKey",
    "is_git_related": "isGitRelated",
    "team_id": "teamId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PrivateKey$Outbound = {
  id?: number | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  private_key?: string | undefined;
  is_git_related?: boolean | undefined;
  team_id?: number | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PrivateKey$outboundSchema: z.ZodType<
  PrivateKey$Outbound,
  z.ZodTypeDef,
  PrivateKey
> = z.object({
  id: z.number().int().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  privateKey: z.string().optional(),
  isGitRelated: z.boolean().optional(),
  teamId: z.number().int().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    privateKey: "private_key",
    isGitRelated: "is_git_related",
    teamId: "team_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrivateKey$ {
  /** @deprecated use `PrivateKey$inboundSchema` instead. */
  export const inboundSchema = PrivateKey$inboundSchema;
  /** @deprecated use `PrivateKey$outboundSchema` instead. */
  export const outboundSchema = PrivateKey$outboundSchema;
  /** @deprecated use `PrivateKey$Outbound` instead. */
  export type Outbound = PrivateKey$Outbound;
}

export function privateKeyToJSON(privateKey: PrivateKey): string {
  return JSON.stringify(PrivateKey$outboundSchema.parse(privateKey));
}

export function privateKeyFromJSON(
  jsonString: string,
): SafeParseResult<PrivateKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrivateKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrivateKey' from JSON`,
  );
}
